@page "/VerifyPasswordChange/email={Email}"
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@using Application.API
@inject EmailAPI EmailClientAccess

<div class="d-flex justify-content-center align-items-center" style="min-height: 90vh; flex-direction: column;">
    <img src="Images/UniLogo.png" alt="University of Lincoln Logo" style="width: 150px; height: auto; margin-bottom: 10px;">
    <h3 class="text-center mb-4" style="font-family: 'Lato', sans-serif; color: #4A4A4A; margin-top: -10px;"> University of Lincoln TSE Feedback Tracking Tool! </h3>

    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <form @onsubmit="Submit">
                            <!-- First name header and text box-->
                            <div class="mb-3">
                                <!-- Username header and text box-->
                                <center><label for="password" class="form-label">Please enter the password you wish to use</label></center>
                                <input type="text" class="form-control" id="password" placeholder="Enter Password" @bind-value="Password">
                                <input type="text" class="form-control" id="password" placeholder="Confirm Password" @bind-value="Password2">
                                <input type="text" class="form-control" id="code" placeholder="Enter the code we sent in the email here" @bind-value="InputtedCode">
                            </div>
                            <div class="d-grid">
                                <button type="submit" class="btn btn-primary">Change Password</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    html, body {
    height: 100%;
    margin: 0;
    overflow: hidden;
    }

    .card {
    background-color: #EBF0F5;
    width: 100%;
    max-width: 600px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    }
</style>

@code {
    public string Password { get; set; }
    public string Password2 { get; set; }
    public string InputtedCode { get; set;}
    public bool CodeMatch;
    [Parameter] public string Email { get; set; }

    private async void Submit()
    {
        CodeMatch = await EmailClientAccess.CheckAndDeleteCode(InputtedCode);
        if (Password == Password2 && CodeMatch == true)
        {
            await new UserAPI().UpdatePassword(Email.ToString(), Password.ToString());
            await JSRuntime.InvokeVoidAsync("alert", "Password successfully changed");
        }
        else if (Password != Password2)
        {
            Password = "";
            Password2 = "";
            await JSRuntime.InvokeVoidAsync("alert", "The entered passwords don't match.");
        }
        else if (CodeMatch == false)
        {
            InputtedCode = "";
            await JSRuntime.InvokeVoidAsync("alert", "Your code doesn't match the one we sent.");
        }
    }
}
