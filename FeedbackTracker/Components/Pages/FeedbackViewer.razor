@page "/viewfeedback/{FeedbackID}"
@rendermode InteractiveServer
@using Application.API
@using FeedbackTrackerCommon.Definitions
@inject FeedbackAPI FeedbackClienFeedbacktAccess
@inject UserAPI UserClientAccess
@inject JAuth JAuth

@{
	//Show title.
	<PageTitle>Feedback</PageTitle>
	
		@if (SelectedFeedback != null)
		{
			@if (!isEditing)
			{
				// display feedback {title,deadline,description,create extension request button}
				<div class="flex-row">
					<div class="flex-column">
						<h1 class="card-text"><strong><u>@SelectedFeedback.Title</u></strong></h1>
						<p class="card-text"><strong>Created By:</strong> @users.First(u => u.UserID == SelectedFeedback.AssigneeID).Username</p>
						<p class="card-text"><strong>Opened on:</strong> @SelectedFeedback.CreatedDate?.ToString("g")</p>
						
						@if (SelectedFeedback.Closed)
						{
							<p class="card-text"><strong>Closed on:</strong> @SelectedFeedback.ClosedDate?.ToString("g")</p>
						}
						
						<p class="card-text"><strong>Description:</strong> @SelectedFeedback.FeedbackText</p>
						<!-- <p class="card-text"><strong>Label:</strong> @SelectedFeedback.Label.ToString()</p> -->
					</div>
					<div>
						@if (SelectedFeedback.Closed)
						{
							<p>This feedback is closed, it can't be edited and new comments can't be added.</p>
						}
						else
						{
							if (@JAuth.User.UserID == SelectedFeedback.AssigneeID)
							{
								<button class="btn btn-primary" @onclick="EnableEditing">Edit </button>
							}
						}

						@if (JAuth.User.IsTeacher)
						{
							@if (SelectedFeedback.Closed)
							{
								<button class="btn btn-primary" @onclick="ToggleCompletion">Mark as incomplete </button>
							}
							else
							{								
								<button class="btn btn-primary" @onclick="ToggleCompletion">Mark as Complete </button>
							}
						}
					</div>
				</div>
			}
			
			
			@if (isEditing)
			{
				<div>
					<label for="editTitle">Title:</label>
					<input id="editTitle" type="text" @bind="editingTitle" />
				</div>
				<div>
					<label for="editDescription">Description:</label>
					<textarea id="editDescription" @bind="editingDescription"></textarea>
				</div>
				<button @onclick="SaveChanges">Save</button>
				<button @onclick="CancelEditing">Cancel</button>
			}

			@try
			{
				if (SelectedComments != null)
				{
					//If theres no comments, show a message
					if (SelectedComments.Count == 0)
					{
						<p>No comments yet!</p>
					}
					else
					{
						// Show comments.
						foreach (var comment in SelectedComments)
						{
							<p>Commented by: @users.First(u => u.UserID == comment.CommenterID).Username</p>
							<p>Content: @comment.Body</p>
						}
					}

					<!-- Comment input -->
					@if (!SelectedFeedback.Closed)
					{
						<div class="comment-box" style="margin-top: 20px;">
							<textarea @bind="newCommentText"
							placeholder="Add a comment..."
							rows="3" cols="100"></textarea>
							<br />
							<button class="btn btn-primary" @onclick="SubmitComment">Submit Comment</button>
						</div>
					}
					else 
					{
						<p><strong>Cannot create any new comments, feedback is closed.</strong></p>
					}
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine("error view");
			}

		}
		
		<NavLink class="btn btn-primary" href="usersfeedback">Back</NavLink>
}

@code {
	private string newCommentText = "";
	private string currentTab = "total";
	private FeedbackTrackerCommon.Definitions.Feedback SelectedFeedback;

	private List<User> users = new();
	private int selectedUserId;

	private List<FeedbackComments> SelectedComments;
	Dictionary<int, string> UserComments = new();

	[Parameter]
	public string FeedbackID { get; set; }

	private async Task LoadFeedback(int ID)
	{
		SelectedFeedback = await FeedbackClientAccess.GetFeedbackByID(ID);

		if (SelectedFeedback != null)
		{
			StateHasChanged();
		} else { Console.WriteLine("Failed to load feedback."); }
	}

	//Editing

	private bool isEditing = false;
	private string editingTitle;
	private string editingDescription;

	// selected feedback
	//private FeedbackTrackerCommon.Definitions.Feedback? SelectedFeedback;

	private void EnableEditing()
	{
		isEditing = true;
		editingTitle = SelectedFeedback.Title;
		editingDescription = SelectedFeedback.FeedbackText;
	}


	private async Task LoadUsers()
	{
		var AllUsers = await FeedbackClientAccess.GetAllUsersAsync();

		if (AllUsers != null)
		{
			users = AllUsers;
		}
	}


	private void CancelEditing()
	{
		isEditing = false;
		// Revert changes
		editingTitle = SelectedFeedback.Title;
		editingDescription = SelectedFeedback.FeedbackText;
	}


	private async Task SaveChanges()
	{
		if (SelectedFeedback != null)
		{
			FeedbackTrackerCommon.Definitions.Feedback editFeedback = SelectedFeedback;
			editFeedback.Title = editingTitle;
			editFeedback.FeedbackText = editingDescription;
			await FeedbackClientAccess.UpdateFeedback(editFeedback);
			StateHasChanged();

		}
		isEditing = false;
	}
	
    private async Task LoadComments(int ID)
    {
        SelectedComments = await FeedbackClientAccess.GetComments(ID);
        if (SelectedComments == null)
        {
            Console.WriteLine("No comments found.");
        }
        else
        {
            UserComments.Clear();
            foreach (var comment in SelectedComments)
            {
                var user = await UserClientAccess.GetUserByID(comment.CommenterID);
                UserComments[comment.CommentID] = user.Username;
            }
        }
    }

	/// <summary>
	/// Create a new comment
	/// </summary>
	private async void SubmitComment()
	{
		//Send comment then reset text.
		await FeedbackClientAccess.CreateComment(SelectedFeedback.FeedbackID,JAuth.User.UserID,newCommentText);
		newCommentText = "";
	}

	protected override async Task OnInitializedAsync()
	{
		await LoadUsers();
        await LoadFeedback(int.Parse(FeedbackID));
        await LoadComments(int.Parse(FeedbackID));
		
	}

	/// <summary>
	/// Toggles the completion status for the feedback.
	/// </summary>
    private void ToggleCompletion()
    {
	    new FeedbackAPI().SetState(int.Parse(FeedbackID), !SelectedFeedback.Closed);
	    SelectedFeedback.Closed = !SelectedFeedback.Closed;
    }
	
}