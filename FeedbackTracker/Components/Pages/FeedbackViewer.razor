@page "/viewfeedback/{FeedbackID}"
@using FeedbackTrackerCommon.Definitions
@using Application
@inject FeedbackApiClient FeedbackClientAccess
@inject UserAPI UserClientAccess

<PageTitle>Feedback Viewer</PageTitle>

<h1>Feedback Viewer</h1>

<h3>Select Feedback To View</h3>

<div style="margin: 20px 0">
    <button @onclick='() => currentTab = "total"'>All Feedback</button>
    <button @onclick='() => currentTab = "completed"'>Completed</button>
    <button @onclick='() => currentTab = "todo"'>Not Completed</button>
</div>

<p>Current Tab: @currentTab</p>

@if (currentTab == "total")
{
    <h4>All Feedback</h4>
    @if (SelectedFeedback != null)
    {
        <p><strong>Title:</strong> @SelectedFeedback.Title</p>
        <p><strong>Description:</strong> @SelectedFeedback.FeedbackText</p>

        @if (SelectedComments != null)
        {
            <h4>Comments:</h4>
            @foreach (var comment in SelectedComments)
            {
                <p><strong>Commenter Username:</strong> @UserComments[comment.CommentID]</p>
                <p>@comment.Body</p>
            }
        }
        else
        {
            <p>No comments yet!</p>
        }
    }
    else
    {
        <p>No feedback found.</p>
    }
    <NavLink class="btn btn-primary" href="usersfeedback">Back</NavLink>
}

@code {
    private string currentTab = "total";
    private FeedbackTrackerCommon.Definitions.Feedback SelectedFeedback;
    private User SelectedUser;
    private List<FeedbackComments> SelectedComments;
    Dictionary<int, string> UserComments = new Dictionary<int, string>();

    [Parameter]
    public string FeedbackID { get; set; }

    private async Task LoadFeedback(int ID)
    {
        SelectedFeedback = await FeedbackClientAccess.GetFeedbackByID(ID);
        if (SelectedFeedback == null)
        {
            Console.WriteLine("Failed to load feedback.");
        }
    }

    private async Task LoadComments(int ID)
    {
        SelectedComments = await FeedbackClientAccess.GetComments(ID);
        if (SelectedComments == null)
        {
            Console.WriteLine("No comments found.");
        }
        else
        {
            UserComments.Clear();
            foreach (var comment in SelectedComments)
            {
                var user = await UserClientAccess.GetUserByID(comment.CommenterID);
                UserComments[comment.CommentID] = user.Username;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadFeedback(int.Parse(FeedbackID));
        await LoadComments(int.Parse(FeedbackID));
    }
}
