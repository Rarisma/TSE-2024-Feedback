@page "/viewfeedback/{FeedbackID}"
@rendermode InteractiveServer
@using Application.API
@using Core.Definitions
@using Serilog
@inject FeedbackAPI FeedbackClientAccess
@inject ModuleAPI ModuleAPI
@inject UserAPI UserAPI
@inject JAuth JAuth
@inject NavigationManager NavigationManager

<PageTitle>Feedback</PageTitle>

<RadzenCard Style="margin: 20px; background-color: #f5f7fa; border: none; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
	@if (SelectedFeedback != null)
	{
		@if (!_isEditing)
		{
			<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Start" Gap="1rem" Style="margin-bottom: 20px;">
				<RadzenStack>
					<RadzenText TextStyle="TextStyle.H3" Style="color: #2c3e50; font-weight: bold; text-decoration: underline;">@SelectedFeedback.Title</RadzenText>
					<RadzenText TextStyle="TextStyle.Body1" Style="margin-top: 10px;">
						<b>Created By:</b> @_users.First(u => u.UserID == SelectedFeedback.AssigneeID).Username
					</RadzenText>
					<RadzenText TextStyle="TextStyle.Body1">
						<b>Assigned To:</b> @_users.First(u => u.UserID == SelectedFeedback.AssignedUserID).Username
					</RadzenText>
					<RadzenText TextStyle="TextStyle.Body1">
						<b>Module: </b> @moduleTitle
					</RadzenText>
					<RadzenText TextStyle="TextStyle.Body1">
						<b>Opened on:</b> @SelectedFeedback.CreatedDate?.ToString("g")
					</RadzenText>
					
					@if (SelectedFeedback.Closed)
					{
						<RadzenText TextStyle="TextStyle.Body1">
							<b>Closed on:</b> @SelectedFeedback.ClosedDate?.ToString("g")
						</RadzenText>
					}
					
					<RadzenText TextStyle="TextStyle.Body1" Style="margin-top: 10px;">
						<b>Description:</b> @SelectedFeedback.FeedbackText
					</RadzenText>
				</RadzenStack>
				
				<RadzenStack>
					@if (SelectedFeedback.Closed)
					{
						<RadzenBadge BadgeStyle="BadgeStyle.Warning" Text="Closed" Style="font-size: 14px; margin-bottom: 10px;" />
						<RadzenText TextStyle="TextStyle.Body1">This feedback is closed, it can't be edited and new comments can't be added.</RadzenText>
					}
					else
					{
						if (@JAuth.User!.UserID == SelectedFeedback.AssigneeID)
						{
							<RadzenButton Text="Edit" Icon="edit" ButtonStyle="ButtonStyle.Primary" Style="background-color: #3498db; margin-bottom: 10px;" Click="@EnableEditing" />
						}
					}

					@if (JAuth.User!.IsTeacher)
					{
						@if (SelectedFeedback.Closed)
						{
							<RadzenButton Text="Mark as Incomplete" Icon="refresh" ButtonStyle="ButtonStyle.Secondary" Style="background-color: #7f8c8d;" Click="@ToggleCompletion" />
						}
						else
						{
							<RadzenButton Text="Mark as Complete" Icon="check_circle" ButtonStyle="ButtonStyle.Success" Style="background-color: #2ecc71;" Click="@ToggleCompletion" />
						}
					}
				</RadzenStack>
			</RadzenStack>
		}
		
		@if (_isEditing)
		{
			<RadzenCard Style="background-color: #ecf0f1; margin-bottom: 20px;">
				<RadzenStack Gap="1rem">
					<RadzenFormField Text="Title" Style="width: 100%;">
						<RadzenTextBox @bind-Value="editingTitle" Style="width: 100%;" />
					</RadzenFormField>
					<RadzenFormField Text="Description" Style="width: 100%;">
						<RadzenTextArea @bind-Value="editingDescription" Style="width: 100%; min-height: 100px;" />
					</RadzenFormField>
					<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem">
						<RadzenButton Text="Save" Icon="save" ButtonStyle="ButtonStyle.Primary" Style="background-color: #3498db;" Click="@SaveChanges" />
						<RadzenButton Text="Cancel" Icon="cancel" ButtonStyle="ButtonStyle.Light" Style="background-color: #95a5a6;" Click="@CancelEditing" />
					</RadzenStack>
				</RadzenStack>
			</RadzenCard>
		}

		@try
		{
			@if (_selectedComments != null)
			{
				<RadzenCard Style="background-color: #2c3e50; color: white; margin-top: 20px; margin-bottom: 20px;">
					<RadzenText TextStyle="TextStyle.H5" Style="color: white; margin-bottom: 15px;">Comments</RadzenText>
					
					@if (_selectedComments.Count == 0)
					{
						<RadzenText TextStyle="TextStyle.Body1" Style="color: #ecf0f1;">No comments yet!</RadzenText>
					}
					else
					{
						<RadzenStack Gap="1rem">
							@foreach (var comment in _selectedComments)
							{
								<RadzenCard Style="background-color: #34495e; color: white; margin-bottom: 10px;">
									<RadzenText TextStyle="TextStyle.Body1" Style="color: #3498db; font-weight: bold;">
										@_users.First(u => u.UserID == comment.CommenterID).Username
										
										at @comment.CommentTime
									</RadzenText>
									<RadzenText TextStyle="TextStyle.Body1" Style="color: #ecf0f1; margin-top: 5px;">
										@comment.Body
									</RadzenText>
								</RadzenCard>
							}
						</RadzenStack>
					}
				</RadzenCard>

				@if (!SelectedFeedback.Closed)
				{
					<RadzenCard Style="background-color: #ecf0f1; margin-top: 20px;">
						<RadzenStack>
							<RadzenFormField Text="Add a comment" Style="width: 100%;">
								<RadzenTextArea @bind-Value="_newCommentText" Placeholder="Write your comment here..." 
								                Style="width: 100%; min-height: 80px;" Disabled="false" />
							</RadzenFormField>
							<div style="text-align: right; margin-top: 10px;">
								<RadzenButton Text="Submit Comment" Icon="send" ButtonStyle="ButtonStyle.Primary" Style="background-color: #3498db;" Click="@SubmitComment" />
							</div>
						</RadzenStack>
					</RadzenCard>
				}
				else 
				{
					<RadzenText TextStyle="TextStyle.Body1" Style="font-weight: bold; color: #e74c3c; margin-top: 10px;">
						Cannot create any new comments, feedback is closed.
					</RadzenText>
				}
			}
		}
		catch (Exception ex)
		{
			Log.Error(ex, "Failed to load feedback viewer");
		}
	}
	
	<div style="margin-top: 20px;">
		<RadzenButton Text="Back" Icon="arrow_back" ButtonStyle="ButtonStyle.Secondary"
		              Style="background-color: #7f8c8d;" Click="@(() => NavigateToUsersFeedback())" />
	</div>
</RadzenCard>

@code {
	private string _newCommentText = "";
	public Core.Definitions.Feedback? SelectedFeedback;

	private List<User> _users = new();

	private List<FeedbackComments>? _selectedComments;

	[Parameter]
	public string? FeedbackID { get; set; }

	private void NavigateToUsersFeedback()
	{
		NavigationManager.NavigateTo("usersfeedback");
	}

	private async Task LoadFeedback(int id)
	{
		SelectedFeedback = await FeedbackClientAccess.GetFeedbackByID(id);
		var mod = await ModuleAPI.GetModuleByID(SelectedFeedback.ModuleID);
		moduleTitle = mod.Module;
		if (SelectedFeedback != null)
		{
			StateHasChanged();
		} else { Console.WriteLine("Failed to load feedback."); }
	}

	//Editing

	private bool _isEditing;
	private string editingTitle;
	private string editingDescription;
	private string moduleTitle;

	private void EnableEditing()
	{
		_isEditing = true;
		if (SelectedFeedback != null)
		{
			editingTitle = SelectedFeedback.Title;
			editingDescription = SelectedFeedback.FeedbackText;
		}
	}


	private async Task LoadUsers()
	{
		var allUsers = await UserAPI.GetAllUsers();

		if (allUsers != null)
		{
			_users = allUsers;
		}
	}


	private void CancelEditing()
	{
		_isEditing = false;
		// Revert changes
		if (SelectedFeedback != null)
		{
			editingTitle = SelectedFeedback.Title;
			editingDescription = SelectedFeedback.FeedbackText;
		}
	}


	private async Task SaveChanges()
	{
		if (SelectedFeedback != null)
		{
			Core.Definitions.Feedback? editFeedback = SelectedFeedback;
			editFeedback.Title = editingTitle;
			editFeedback.FeedbackText = editingDescription;
			await FeedbackClientAccess.UpdateFeedback(editFeedback);
			StateHasChanged();

		}
		_isEditing = false;
	}
	
    private async Task LoadComments(int id)
    {
        _selectedComments = await FeedbackClientAccess.GetComments(id);
        if (_selectedComments == null)
        {
            Console.WriteLine("No comments found.");
        }
    }

	/// <summary>
	/// Create a new comment
	/// </summary>
	private async Task SubmitComment()
	{
		//Send comment to db
		await FeedbackClientAccess.CreateComment(SelectedFeedback!.FeedbackID,JAuth.User!.UserID,_newCommentText);
		
		//Show locally without a refresh
		_selectedComments.Add(new FeedbackComments
		{
			CommenterID = JAuth.User!.UserID,
			Body = _newCommentText,
			CommentTime = DateTime.Now,
		});
		StateHasChanged();
		_newCommentText = "";
	}

	protected override async Task OnInitializedAsync()
	{
		if (JAuth.IsAuthorised())
		{
			if (FeedbackID != null)
			{
				await LoadUsers();
				await LoadFeedback(int.Parse(FeedbackID));
				await LoadComments(int.Parse(FeedbackID));
			}
		}
	}

	/// <summary>
	/// Toggles the completion status for the feedback.
	/// </summary>
    private void ToggleCompletion()
	{
		if (FeedbackID != null && SelectedFeedback != null)
		{
			SelectedFeedback.Closed = !SelectedFeedback.Closed;
			new FeedbackAPI().SetStatus(int.Parse(FeedbackID), SelectedFeedback.Closed);
		}
	}
}