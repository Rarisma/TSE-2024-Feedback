@rendermode InteractiveServer
@page "/viewfeedback"
@using FeedbackTrackerCommon.Definitions
@using Application
@inject FeedbackApiClient FeedbackClientAccess
@{
	<PageTitle>Feedback Viewer</PageTitle>
	<h1>Feedback Viewer</h1>
	<h3>Select Feedback To View</h3>
	<div style="margin: 20px 0">
		<button @onclick='() => currentTab = "total"'>All Feedback</button>
		<button @onclick='() => currentTab = "completed"'>Completed</button>
		<button @onclick='() => currentTab = "todo"'>Not Completed</button>
	</div>

	<p>Current Tab: @currentTab</p>
	@if (currentTab == "total")
	{
		<h4>All Feedback</h4>
		@if (SelectedFeedback != null)
		{

			@if (!isEditing)
			{
				<p><strong>Title:</strong> @SelectedFeedback.Title</p>
				<p><strong>Description:</strong> @SelectedFeedback.FeedbackText</p>
				<button @onclick="EnableEditing">Edit </button>
			}
			else
			{
				<div>
					<label for="editTitle">Title:</label>
					<input id="editTitle" type="text" @bind="editingTitle" />
				</div>
				<div>
					<label for="editDescription">Description:</label>
					<textarea id="editDescription" @bind="editingDescription"></textarea>
				</div>
				<button @onclick="SaveChanges">Save</button>
				<button @onclick="CancelEditing">Cancel</button>
			}




			try
			{
				if (SelectedComments != null)
				{
					foreach (var comment in SelectedComments)
					{
						<p>@comment.CommenterID</p>
						<p>@comment.Body</p>
					}
				}
				else
				{
					<p>No comments yet!</p>
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine("error view");
			}
		}
		else
		{
			<p>No feedback found</p>
		}
	}
}



@code {

	private string currentTab = "total";
	private FeedbackTrackerCommon.Definitions.Feedback SelectedFeedback;
	private List<FeedbackTrackerCommon.Definitions.FeedbackComments> SelectedComments;

	//private string UsernameForComments;



	//Editing

	private bool isEditing = false;
	private string editingTitle;
	private string editingDescription;


	private async Task LoadFeedback()
	{
		var feedback = await FeedbackClientAccess.GetFeedbackByID(3);

		if (feedback != null)
		{
			SelectedFeedback = feedback;
		}
		else
		{
			Console.WriteLine("Failed to load feedback.");
		}

		await LoadComments(SelectedFeedback.FeedbackID);
	}

	private async Task LoadComments(int ID)
	{
		var comments = await FeedbackClientAccess.GetComments(ID);

		if (comments != null)
		{
			SelectedComments = comments;
		}
	}

	private void EnableEditing()
	{
		isEditing = true;
		editingTitle = SelectedFeedback.Title;
		editingDescription = SelectedFeedback.FeedbackText;
	}

	private void CancelEditing()
	{
		isEditing = false;
		// Revert changes
		editingTitle = SelectedFeedback.Title;
		editingDescription = SelectedFeedback.FeedbackText;
	}


	private async Task SaveChanges()
	{
		if (SelectedFeedback != null)
		{
				
			await FeedbackClientAccess.UpdateFeedback(SelectedFeedback.FeedbackID, editingTitle, editingDescription);
			SelectedFeedback.Title = editingTitle;
			SelectedFeedback.FeedbackText = editingDescription;
			StateHasChanged();

		}
		isEditing = false;
	}

	// private async Task LoadUser()L
	// {
	// 	Not finished as was waiting for whoever finished login system, can be done soon
	// }

	protected override async Task OnInitializedAsync()
	{
		//await LoadUser();
		await LoadFeedback();
	}


}
