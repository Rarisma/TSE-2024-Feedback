@page "/"
@rendermode InteractiveServer
@inject JAuth JAuth
@using Application.API
@using FeedbackTrackerCommon.Definitions
@inject FeedbackAPI FeedbackClientAccess



<PageTitle>Feedback Tracking Tool</PageTitle>

<div>
    <center><h1>Feedback Tracking Tool</h1></center>
    <br><br />
    <center><h2>Dashboard</h2></center>
    <div>
        <h3>Your feedback:</h3>
        <h6>Feedback you are assigned to or have created.</h6>

        @foreach (var feedback in allFeedback)
        {
            <div style="border: 1px solid black; margin: 5px; padding: 10px;">
                <h4>@feedback.Title</h4>
                <p><strong>@feedback.FeedbackText</strong></p>
                <p><strong>Completed:</strong> @feedback.Closed</p>
            </div>
        }
        
        @if (allFeedback.Count == 0)
        {
            <p>&nbsp; &nbsp; </p>
            <center><h3>You have no feedback to read about...</h3></center>
            <p>&nbsp; &nbsp; </p>
            <p>&nbsp; &nbsp; </p>
            <center><h4>Time to create some?</h4></center>
        }
        else
        {
            <center><h4>Why don't you create some feedback?</h4></center>
        }
    </div>

    <center><a href="/CreateFeedback" class="btn btn-primary">Create new feedback</a></center>

</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        JAuth.EnforceAuth();
        if(JAuth.IsAuthorised()){
            await LoadFeedback();
        }

    }

    private List<FeedbackTrackerCommon.Definitions.Feedback> allFeedback = new();

    // loads feedback from api
    private async Task LoadFeedback()
    {
        try
        {

            List<FeedbackTrackerCommon.Definitions.Feedback> feedbackList = await FeedbackClientAccess.GetAssignedFeedbacks(6);

            if (feedbackList != null && feedbackList.Any())
            {
                allFeedback = feedbackList.Select(fb => new FeedbackTrackerCommon.Definitions.Feedback()
                    {
                        Title = fb.Title,
                        FeedbackText = fb.FeedbackText,
                        Closed = fb.Closed
                    }).ToList();
                if (JAuth.GetUser().IsTeacher)
                {
                    allFeedback = allFeedback.Where(f => f.AssignedUserID == JAuth.GetUser().UserID).ToList();
                }
                else
                {
                    allFeedback = allFeedback.Where(f => f.AssigneeID == JAuth.GetUser().UserID).ToList();
                }
            }
            else
            {
                Console.WriteLine("No feedback found. Using test data.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading feedback: {ex.Message}");
        }
    }
}
