@page "/"
@rendermode InteractiveServer
@inject JAuth JAuth
@using Application.API
@using Core.Definitions
@using Serilog
@inject FeedbackAPI FeedbackClientAccess
@inject UserAPI UserClient


@code {
    private string? WelcomeMessage { get; set; }
    private string? WelcomeSymbol { get; set; }

    protected override void OnInitialized() {
        base.OnInitialized();
        UserGreeting();
    }

    private void UserGreeting() {
        var currentTime = DateTime.Now.Hour; //get the current time

        if (currentTime < 12) {
            WelcomeMessage = "Good Morning";
            WelcomeSymbol = "☀️";
        }
        else if (currentTime < 18)
        {
            WelcomeMessage = "Good Afternoon";
            WelcomeSymbol = "☕";
        }
        else {
            WelcomeMessage = "Have a Good Evening";
            WelcomeSymbol = "🌃";
        }
    }
}


<div class="intro-msg-container">
    <h3 class="intro-msg">@WelcomeMessage, @_assignee.Username  @WelcomeSymbol</h3>
</div>


<div>
    <br><br />
    <div style="text-align: center;" ><h2 style="margin-top: 60px;">Dashboard</h2></div>

    <!-- top dash icons -->
    <div class="dash-container-top">
        <div class="dashboard-box-topleft">
			<p2>
                <div style="text-align: center;" >
                    <p2>Current modules:</p2>
                    @if(_modules!=null){
                        @foreach(var module in _modules){
                            <br/>
                            <p2>@module.Module</p2>
                        }
                    }</div>
            </p2>
        </div>
        <div class="dashboard-box-topright"><p2>Recent Feedbacks</p2></div>
    </div>

    <!-- bottom dashboard icons -->
    <div class="dash-container-top">
        <div class="dashboard-box-leftcard">
            <p2>
                <div style="text-align: center;" >
                    <p2>New Feedbacks:</p2>
                    @if (_notifications != null)
                    {
                        @foreach (var notification in _notifications)
                        {
                            <br/>
                            <div class="feedback-box">
                                <p2>Time: @notification.Timestamp.ToLocalTime() </p2>
                                <p2> Feedback: @notification.FeedbackID </p2>
                            </div>
                        }
                    }
                </div>
            </p2>
        </div>
                <div class="bottom-strip"><p2>Notification</p2></div>
                <div class="create-tab">
                    <p2>
                        <div style="text-align: center;" ><p2>Why don't you add some more feedback?</p2></div>
                        <div style="text-align: center;" ><a href="/Feedback" class="btn btn-primary">Create new feedback</a></div>
                    </p2>
                </div>
            </div>


    <!-- View Feedback (anypoint in usersfeedback.razor? page structure should be discussed in a meeting) -->
    <div>
        <div style="text-align: center;" ><h2 style="margin-top: -20px; margin-bottom: 20px;">Your feedback</h2></div>

        <h6>Feedback you are assigned to or have created.</h6>
                @if(_allFeedback!=null){
                    @foreach (var feedback in _allFeedback)
                    {
                        <div class="feedback-box">
                            <h4>@feedback.Title</h4>
                            <p><strong>@feedback.FeedbackText</strong></p>
                            <p><strong>Completed:</strong> @feedback.Closed</p>
                        </div>

                    }
                }
            @if (_allFeedback.Count == 0)
            {
                <p>&nbsp; &nbsp; </p>
                <div style="text-align: center;" ><h3>You have no feedback to read about...</h3></div>
                <p>&nbsp; &nbsp; </p>
                <p>&nbsp; &nbsp; </p>
                <div style="text-align: center;" ><h4>Time to create some?</h4></div>
            }
            else
            {
                <div class="bottom-prompt">
                    <div style="text-align: center;" ><h4>Why don't you add some more feedback?</h4></div>
                    <div style="text-align: center; margin-bottom: 5px;" ><a href="/Feedback" class="btn btn-primary">Create new feedback</a></div>
                </div>
            }
        </div>
    </div>


    @code {
        private User? _assignee = new();
        private List<Modules?>? _modules = new();
        private List<Notification?>? _notifications = new();
        
        // get logged-in user
        private async Task GetUser()
        {
            if(JAuth.GetUser()!=null){
                _assignee = JAuth.GetUser();
                await GetModules();
                await GetNotifications();
            }
        }

        private async Task GetModules(){
            if(_assignee!=null){
                _modules = await UserClient.GetModules(_assignee.UserID);
                StateHasChanged();
            }
    }

    private async Task GetNotifications()
    {
        if (_assignee != null)
        {
            _notifications = await UserClient.GetNotification(_assignee.UserID);
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        JAuth.EnforceAuth();

        if (JAuth.IsAuthorised()) {        
            try
            {
                await GetUser();
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Failed to get user details");
            }
            await LoadFeedback();
        }
    }

    private List<Core.Definitions.Feedback> _allFeedback = new();

    // loads feedback from api
    private async Task LoadFeedback()
    { 
        try
        {

            //List<FeedbackTrackerCommon.Definitions.Feedback> feedbackList =
            //await FeedbackClientAccess.GetAssignedFeedbacks(JAuth.GetUser().UserID) ??
            //new List<FeedbackTrackerCommon.Definitions.Feedback>();

            if (_assignee != null)
            {
                List<Core.Definitions.Feedback>? feedbackList = 
                    await FeedbackClientAccess.GetAssignedFeedbacks(_assignee.UserID);
                if (feedbackList != null && feedbackList.Any())
                {
                    _allFeedback = feedbackList.Select(fb => new Core.Definitions.Feedback()
                    {
                        Title = fb.Title,
                        FeedbackText = fb.FeedbackText,
                        Closed = fb.Closed
                    }).ToList();
                }
                else
                {
                    Log.Warning("No feedback found for user {UserID}", _assignee.UserID);
                }
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Error loading feedback.");
        }
    }
}
