@page "/"
@rendermode InteractiveServer
@inject JAuth JAuth
@using Application.API
@using FeedbackTrackerCommon.Definitions
@inject FeedbackAPI FeedbackClientAccess
@inject UserAPI UserClient

@code {
    private string welcomeMessage { get; set; }
    private string welcomeSymbol { get; set; }

    protected override void OnInitialized() {
        base.OnInitialized();
        userGreeting();
    }

    private void userGreeting() {
        var currentTime = DateTime.Now.Hour; //get the current time

        if (currentTime < 12) {
            welcomeMessage = "Good Morning";
            welcomeSymbol = "☀️";
        }
        else if (currentTime < 18)
        {
            welcomeMessage = "Good Afternoon";
            welcomeSymbol = "☕";
        }
        else {
            welcomeMessage = "Have a Good Evening";
            welcomeSymbol = "🌃";
        }
    }
}

<div class="intro-msg-container">
    <h3 class="intro-msg">@welcomeMessage, @assignee.Username (username)! @welcomeSymbol</h3>
</div>

<div>
    <br><br />
    <center><h2 style="margin-top: 60px;">Dashboard</h2></center>

    <!-- top dash icons -->
    <div class="dash-container-top">
        <div class="dashboard-box-topleft"><p2>Current modules</p2></div>
        <div class="dashboard-box-topright"><p2>Notifications</p2></div>
    </div>

    <!-- bottom dashboard icons -->
    <div class="dash-container-top">
        <div class="dashboard-box-leftcard"><p2>Upcoming deadlines</p2></div>
        <div class="bottom-strip"><p2>Most recent feedback date</p2></div>
        <div class="create-tab"><p2>Create Feedback Button -> </p2></div>
    </div>

    <!-- View Feedback (anypoint in usersfeedback.razor? page structure should be discussed in a meeting) -->
    <div>
        <center><h2 style="margin-top: -20px; margin-bottom: 20px;">Your feedback</h2></center>

        @foreach (var feedback in allFeedback)
        {
            <div class="feedback-box">
                <h4>@feedback.Title</h4>
                <p><strong>@feedback.FeedbackText</strong></p>
                <p><strong>Completed:</strong> @feedback.Closed</p>
            </div>

        }

        @if (allFeedback.Count == 0)
        {
            <p>&nbsp; &nbsp; </p>
            <center><h3>You have no feedback to read about...</h3></center>
            <p>&nbsp; &nbsp; </p>
            <p>&nbsp; &nbsp; </p>
            <center><h4>Time to create some?</h4></center>
        }
        else
        {
            <div class="bottom-prompt">
                <center><h4>Why don't you add some more feedback?</h4></center>
                <center style="margin-bottom: 5px;"><a href="/Feedback" class="btn btn-primary">Create new feedback</a></center>
            </div>
        }
    </div>
</div>

@code {
    private FeedbackTrackerCommon.Definitions.User assignee = new FeedbackTrackerCommon.Definitions.User { };
    // get logged in user
    private async Task getUser()
    {

        FeedbackTrackerCommon.Definitions.User? user = await UserClient.GetUserByID(JAuth.GetUser().UserID);
        // return logged user
        assignee = user;
    }

    protected override async Task OnInitializedAsync()
    {
        JAuth.EnforceAuth();
        if (JAuth.IsAuthorised()) {
            await LoadFeedback();
        }
    }

    private List<FeedbackTrackerCommon.Definitions.Feedback> allFeedback = new();

    // loads feedback from api
    private async Task LoadFeedback()
    {
        try
        {

            //List<FeedbackTrackerCommon.Definitions.Feedback> feedbackList = await FeedbackClientAccess.GetAssignedFeedbacks(JAuth.GetUser().UserID) ??new List<FeedbackTrackerCommon.Definitions.Feedback>();

            List<FeedbackTrackerCommon.Definitions.Feedback> feedbackList = await FeedbackClientAccess.GetAssignedFeedbacks(6);
            if (feedbackList != null && feedbackList.Any())
            {
                allFeedback = feedbackList.Select(fb => new FeedbackTrackerCommon.Definitions.Feedback()
                    {
                        Title = fb.Title,
                        FeedbackText = fb.FeedbackText,
                        Closed = fb.Closed
                    }).ToList();
            }
            else
            {
                Console.WriteLine("No feedback found. Using test data.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading feedback: {ex.Message}");
        }
    }
}
