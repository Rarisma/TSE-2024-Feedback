@page "/"
@rendermode InteractiveServer  
@inject JAuth JAuth
@using Application.API
@using FeedbackTrackerCommon.Definitions
@inject FeedbackAPI FeedbackClientAccess
@inject UserAPI UserClient


@code {
    private string welcomeMessage { get; set; }
    private string welcomeSymbol { get; set; }


    private void userGreeting() {
        var currentTime = DateTime.Now.Hour; //get the current time

        if (currentTime < 12) {
            welcomeMessage = "Good Morning";
            welcomeSymbol = "☀️";
        }
        else if (currentTime < 18)
        {
            welcomeMessage = "Good Afternoon";
            welcomeSymbol = "☕";
        }
        else {
            welcomeMessage = "Have a Good Evening";
            welcomeSymbol = "🌃";
        }
    }
}


<div class="intro-msg-container">
    <h3 class="intro-msg">@welcomeMessage, @assignee.Username  @welcomeSymbol</h3>
</div>


<div>
    <br><br />
    <center><h2 style="margin-top: 60px;">Dashboard</h2></center>

    <!-- top dash icons -->
    <div class="dash-container-top">
        <div class="dashboard-box-topleft">
			<p2>
				<center>
            <p2>Current modules:</p2>
            @if(modules!=null){
                        @foreach(var module in modules){
                            <br />
                            <p2>@module.Module</p2>
                        }
                    }</center></p2>
        </div>
        <div class="dashboard-box-topright" style="overflow:auto">
            <p2>
                <center>
                    <p2>Recent feedbacks:</p2>
                    @if (allFeedback != null)
                    {
                        <p2> open activity: </p2>
                        @foreach (var feedback in allFeedback.Where(f => f.CreatedDate > DateTime.Now.Date.AddDays(-7) && !f.Closed))
                        {
                            <div class="feedback-box">
                                <h4>@feedback.Title</h4>
                                <p><strong>@feedback.FeedbackText</strong></p>
                                <p><strong>Open:</strong> @feedback.CreatedDate</p>
                            </div>

                        }

                        <p2> closed activity: </p2>
                        @foreach (var feedback in allFeedback.Where(f => f.CreatedDate > DateTime.Now.Date.AddDays(-7) && f.Closed))
                        {
                            <div class="feedback-box">
                                <h4>@feedback.Title</h4>
                                <p><strong>@feedback.FeedbackText</strong></p>
                                <p><strong>Closed At:</strong> @feedback.ClosedDate</p>
                            </div>

                        }
                    }
                </center>
            </p2>
        </div>
    </div>

    <!-- bottom dashboard icons -->
    <div class="dash-container-top">
        <div class="dashboard-box-leftcard">
            <p2>
                <center>
                    <p2>data / statitics</p2>
                    @if(assignee.IsTeacher){
                        <p2>average comnpletion rate: @completionRate</p2>
                    }
                </center>
            </p2>
        </div>
        <div class="bottom-strip" style="overflow:auto">
            <p2>
                <center>
                    <p2>Notifications:</p2>
                    @if (notifications != null)
                    {
                        @foreach (var notification in notifications)
                        {
                            <br />
                            <div class="feedback-box">
                                <p2>Time: @notification.Timestamp.ToLocalTime() </p2>
                                <p2> Feedback: @notification.FeedbackID </p2>
                            </div>
                        }
                    }
                </center>
            </p2>
        </div>
        <div class="create-tab">
            <p2>
                <center><p2>Why don't you add some more feedback?</p2></center>
                <center><a href="/Feedback" class="btn btn-primary">Create new feedback</a></center>
            </p2>
        </div>
    </div>


    <!-- View Feedback (anypoint in usersfeedback.razor? page structure should be discussed in a meeting) -->
    <div>
        <center><h2 style="margin-top: -20px; margin-bottom: 20px;">Your feedback</h2></center>

        <h6>Feedback you are assigned to or have created.</h6>
        @if(allFeedback!=null){
            @foreach (var feedback in allFeedback)
            {
                <div class="feedback-box">
                    <h4>@feedback.Title</h4>
                    <p><strong>@feedback.FeedbackText</strong></p>
                    <p><strong>Completed:</strong> @feedback.Closed</p>
                </div>

            }
        }
        @if (allFeedback.Count == 0)
        {
            <p>&nbsp; &nbsp; </p>
            <center><h3>You have no feedback to read about...</h3></center>
            <p>&nbsp; &nbsp; </p>
            <p>&nbsp; &nbsp; </p>
            <center><h4>Time to create some?</h4></center>
        }
        else
        {
            <div class="bottom-prompt">
                <center><h4>Why don't you add some more feedback?</h4></center>
                <center style="margin-bottom: 5px;"><a href="/Feedback" class="btn btn-primary">Create new feedback</a></center>
            </div>
        }
    </div>
</div>


@code {
    private string? completionRate = "not found";
    private FeedbackTrackerCommon.Definitions.User assignee = new FeedbackTrackerCommon.Definitions.User { };
    private List<FeedbackTrackerCommon.Definitions.Modules> modules = new List<FeedbackTrackerCommon.Definitions.Modules> { };
    private List<FeedbackTrackerCommon.Definitions.Notification> notifications = new List<FeedbackTrackerCommon.Definitions.Notification> { };
    // get logged in user
    private async Task getUser()
    {
        if(JAuth.GetUser()!=null){
            assignee = JAuth.GetUser();
            await LoadFeedback();
            await getModules();
            if(assignee.IsTeacher){
                await getAverageResolveTime(assignee.UserID);
            }
            await getNotifications();
        }

        await InvokeAsync(StateHasChanged);

    }

    private async Task getModules(){
        if(assignee!=null){
            modules = await UserClient.GetModules(assignee.UserID);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task getAverageResolveTime(int usrID){
        completionRate = await UserClient.getAverageResolveTime(usrID);
    }

    private async Task getNotifications()
    {
        if (assignee != null)
        {
            notifications = await UserClient.GetNotification(assignee.UserID);
            await InvokeAsync(StateHasChanged);
        }
    }
    protected override async Task OnInitializedAsync()
    {        
        base.OnInitialized();
        JAuth.EnforceAuth();

        userGreeting();
        if (JAuth.IsAuthorised()) {    
                await Task.Delay(50); // Wait half a second before retrying
            try{
                await getUser();   
            }
            catch{

            }

        }
        StateHasChanged();
        await InvokeAsync(StateHasChanged);
    }


    private List<FeedbackTrackerCommon.Definitions.Feedback> allFeedback = new();

    // loads feedback from api
    private async Task LoadFeedback()
    { 
        try
        {

            //List<FeedbackTrackerCommon.Definitions.Feedback> feedbackList = await FeedbackClientAccess.GetAssignedFeedbacks(JAuth.GetUser().UserID) ??new List<FeedbackTrackerCommon.Definitions.Feedback>();

            List<FeedbackTrackerCommon.Definitions.Feedback> feedbackList = await FeedbackClientAccess.GetAssignedFeedbacks(assignee.UserID);
            if (feedbackList != null && feedbackList.Any())
            {
                allFeedback = feedbackList;
            }
            else
            {
                Console.WriteLine("No feedback found. Using test data.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading feedback: {ex.Message}");
        }
    }
}
