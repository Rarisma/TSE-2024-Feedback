@page "/usersfeedback"
@inject FeedbackAPI FeedbackClientAccess
@inject UserAPI UserClientAccess
@using Application.API
@inject JAuth JAuth
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@{

    <style>

        .title-box {
        background-color: #1f1f1f;
        color: white;
        width: 100%;
        padding: 32px;
        text-align: center;
        }

        .sort-container {
        display: flex;
        align-items: center;
        gap: 8px;
        }

        .sort-box {
        background-color: #1f1f1f;
        border-style: solid;
        border-color: #1f1f1f;
        border-radius: 8px;
        width: 300px;
        padding: 16px;
        margin: 16px;
        text-align: center;
        color: white;
        }

        .feedback-box {
        position: center;
        display: block;
        background-color: #EBF0F5;
        border-style: solid;
        border-color: black;
        border-radius: 8px;
        width: 300px;
        padding: 16px;
        margin-top: 16px;
        margin-bottom: 16px;
        margin-left: 185px;
        text-align: center;
        color: black;
        text-decoration: none;
        }

        .feedback-box:hover {
        transform: translateY(-2px);
        }
    </style>

    <title>TSE Feedback: Your Feedback</title>

    @if (JAuth.IsAuthorised())
    {
        <center>
            <h1>Your Feedback</h1></center>
        @if (SelectedFeedbacks != null && SelectedFeedbacks.Any())
        {
            foreach (var feedback in SelectedFeedbacks)
            {
                <p><strong>Title:</strong> @feedback.Title</p>
                <p><strong>Description:</strong> @feedback.FeedbackText</p>
                <NavLink class="btn btn-primary" href="@($"/viewfeedback/{feedback.FeedbackID}")">View</NavLink>
            }
        }
        else
        {
            <center>
                <p></p></center>
        }

        <div class="sort-container">
            <div class="sort-box">
                <label for="teachername">Sort By Teacher:</label>
                <select id="teachername" @onchange="SortByTeacher">
                    <option value="all">Show All</option>
                    @if (Teachers != null)
                    {
                        foreach (var teacher in Teachers)
                        {
                            <option value="@teacher.UserID">@teacher.Username</option>
                        }
                    }
                    else
                    {
                        <option value="">No Assignments</option>
                    }
                </select>
            </div>

            <div class="sort-box">
                <label for="sorting">Sort By:</label>
                <select id="sorting" @onchange="SortBySelected">
                    <option value="az">A-Z</option>
                    <option value="za">Z-A</option>
                </select>
            </div>
        </div>

        @if (SpecificFeedbacks != null)
        {
            foreach (var feedback in SpecificFeedbacks)
            {
                <NavLink class="feedback-box" href="@($"/viewfeedback/{feedback.FeedbackID}")">
                    <p>@feedback.Title</p>
                    @foreach (var teacher in Teachers)
                    {
                        if (teacher.UserID == feedback.AssigneeID)
                        {
                            <p><strong>@teacher.Username</strong></p>
                        }
                    }
                    <p>@feedback.FeedbackText</p>
                </NavLink>
            }
        }

        <title>TSE Feedback: Your Feedback</title>
    }

    else //For users that aren't logged in
    {
        <style>
            body {
            overflow: hidden;
            }
        </style>
        <div class="loggedout">
            <div class="loggedout-msg">
                <img src="/Images/LoginCone.png" alt="Login Required" class="cone-img">
                <h2>Please log in to access the feedback form.</h2>
                <button class="btn btn-loggedout" @onclick=HomeButton>Return Home</button>
            </div>
        </div>
    }
}

@code {
    private void HomeButton()
    {
        NavigationManager.NavigateTo("/LogIn");
    }

    private List<FeedbackTrackerCommon.Definitions.Feedback> SelectedFeedbacks;

    /// <summary>
    /// These are lists that contain the data from the related
    /// datbase, e.g. Teachers contains data about the user
    /// </summary>
    private List<FeedbackTrackerCommon.Definitions.Feedback> AllFeedbacks = new();

    private List<FeedbackTrackerCommon.Definitions.Feedback> SpecificFeedbacks = new();

    private List<FeedbackTrackerCommon.Definitions.User> Teachers = new();

    // the values that will be assigned for these are from when the user filters their feedback
    private string SelectedOption { get; set; } = "";

    private string SelectedTeacherID { get; set; } = "";

    /// <summary>
    /// Sorts the feedbacks based on the specific filter applied
    /// by the user, by rearranging the lists
    /// </summary>
    private void SortBySelected(ChangeEventArgs e)
    {
        SelectedOption = e.Value?.ToString();

        if (SelectedOption == "az") // alphabetical
        {
            SpecificFeedbacks.Sort((current, next) => current.Title.CompareTo(next.Title));
        }
        else if (SelectedOption == "za") // reverse alphabetical
        {
            SpecificFeedbacks.Sort((current, next) => next.Title.CompareTo(current.Title));
        }
        else if (SelectedOption == "priority") // lowest priority first
        {
            SpecificFeedbacks.Sort((current, next) => current.Priority.CompareTo(next.Priority));
        }
    }

    /// <summary>
    /// Creates a new list depending on the username of the teacher,
    /// all feedbacks not associated with that teacher will be excluded
    /// </summary>
    private void SortByTeacher(ChangeEventArgs e)
    {
        SelectedTeacherID = e.Value.ToString();
        if (SelectedTeacherID == "all") // if the user wishes to see all of their feedbacks
        {
            SpecificFeedbacks = new List<FeedbackTrackerCommon.Definitions.Feedback>(AllFeedbacks);
        }
        else
        {
            SpecificFeedbacks.Clear();
            foreach (var feedback in AllFeedbacks) // loops through original list to add all related feedbacks
            {
                // checks if the teacher assigned the feedback by seeing if they have the same ID as the assignee ID
                if (int.Parse(SelectedTeacherID) == feedback.AssigneeID)
                {
                    SpecificFeedbacks.Add(feedback);
                }
            }
        }
    }

    /// <summary>
    /// Loads all the feedbacks into the two specific feedback lists
    /// by communicating with the API
    /// </summary>
    private async Task LoadAllFeedback(int ID)
    {
        try
        {
            var feedbacks = await FeedbackClientAccess.GetAssignedFeedbacks(ID); // communicates with API
                                                                                 // different assignments to make sure All and Specific don't point to the same object in memory
            AllFeedbacks = feedbacks;
            SpecificFeedbacks = new List<FeedbackTrackerCommon.Definitions.Feedback>(feedbacks);

        }
        catch (Exception ex) // feedbacks fails to load
        {
            Console.WriteLine("Failed to load feedback.");
        }
    }

    /// <summary>
    /// Loads the data for teachers that have assigned feedback to the current user
    /// </summary>
    private async Task LoadTeachers()
    {
        Teachers.Clear(); // empties teacher
        foreach (var feedback in AllFeedbacks)
        {
            // checks to see if a teacher is already in the list, as otherwise the filter dropdown could be cluttered by the same teacher
            if (!Teachers.Any(teach => teach.UserID == feedback.AssigneeID))
            {
                var user = await UserClientAccess.GetUserByID(feedback.AssigneeID); // gets a single user based on a provided ID
                try
                {
                    Teachers.Add(user); // adds to list
                }
                catch (Exception ex) // teachers fails to load
                {
                    Console.WriteLine("Failed to load teacher.");
                }
            }
        }
    }

    private async Task clearNotifications(){
        List<FeedbackTrackerCommon.Definitions.Notification?>? notifications = await UserClientAccess.GetNotification(JAuth.GetUser().UserID);

        if (notifications.Count > 0)
        {
            await UserClientAccess.DeleteNotification(JAuth.GetUser().UserID);

        }
        return;
    }
    /// <summary>
    /// Loads the feedback data and teacher data as soon as the page is loaded
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        if (JAuth.IsAuthorised())
        {
            await LoadAllFeedback(JAuth.User.UserID);
            await LoadTeachers();

            // clear notifications
            await clearNotifications();
        }
    }

}