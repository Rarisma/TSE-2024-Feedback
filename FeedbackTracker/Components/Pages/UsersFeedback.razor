@page "/usersfeedback"
@inject FeedbackAPI FeedbackClientAccess
@inject UserAPI UserClientAccess
@using Application.API
@using Core.Definitions
@using Serilog
@inject JAuth JAuth
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<PageTitle>TSE Feedback: Your Feedback</PageTitle>


@{
    <title>Your Feedback</title>
    @if (JAuth.IsAuthorised())
    {
        <RadzenCard Style="margin-bottom: 30px;">
            <div style="text-align: center;">
                <h1 style="font-size: 3.2rem; font-weight: 700; color: #333333; text-shadow: 0 0 5px rgba(0, 0, 0, 0.3);">
                    Your Feedback
                </h1>
            </div>
            <RadzenCard Style="border-top-left-radius: 10px; border-bop-right-radius: 10px;">
                <label for="teachername">Show from:</label>
                <select id="teachername" @onchange="SortByTeacher">
                    <option value="all">Everyone</option>
                    @if (Users != null)
                    {
                        foreach (var teacher in Users)
                        {
                            <option value="@teacher.UserID">@teacher.Username</option>
                        }
                    }
                    else
                    {
                        <option value="">No Assignments</option>
                    }
                </select>

                <label for="sorting">Sort By:</label>
                <select id="sorting" @onchange="SortBySelected">
                    <option value="az">A-Z</option>
                    <option value="za">Z-A</option>
                    <option value="public">Public Feedback</option>
                    <option value="private">Private Feedback</option>
                </select>

            </RadzenCard>

            <RadzenDataGrid Style="border-bottom-left-radius: 10px; border-bottom-right-radius: 10px;"
                            AllowFiltering="false" AllowSorting="true" PageSize="10" AllowPaging="true" Data="@SpecificFeedbacks" EmptyText="No feedback found">
                <Columns>
                    <RadzenDataGridColumn TItem="Core.Definitions.Feedback" Property="Title" Title="Title" />
                    <RadzenDataGridColumn TItem="Core.Definitions.Feedback" Property="FeedbackText" Title="Feedback" />
                    <RadzenDataGridColumn TItem="Core.Definitions.Feedback" Title="Assignee">
                        <Template Context="feedback">
                            @if (Users != null)
                            {
                                @foreach (var assignee in Users)
                                {
                                    if (assignee.UserID == feedback.AssigneeID)
                                    {
                                        <strong>@assignee.Username</strong>
                                    }
                                }
                            }
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Core.Definitions.Feedback" Title="Status">
                        <Template Context="feedback">
                            @if (JAuth.User.UserID == feedback.AssigneeID)
                            {
                                <strong>You assigned this!</strong>
                            }
                            else
                            {
                                <strong>This was assigned to you!</strong>
                            }
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Core.Definitions.Feedback" Title="View">
                        <Template Context="feedback">
                            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="visibility" Click="@(args => NavigateToFeedback(feedback.FeedbackID))" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenCard>
    }
    else //For users that aren't logged in
    {
        <div class="loggedout">
            <div class="loggedout-msg">
                <img src="/Images/LoginCone.png" alt="Login Required" class="cone-img">
                <h2>Please log in to access the feedback form.</h2>
                <button class="btn btn-loggedout" @onclick=HomeButton>Return Home</button>
            </div>
        </div>
    }

}
	
@code {
    private void HomeButton()
    {
        NavigationManager.NavigateTo("/LogIn");
    }

    private void NavigateToFeedback(int feedbackId)
    {
        NavigationManager.NavigateTo($"/viewfeedback/{feedbackId}");
    }

    /// <summary>
    /// These are lists that contain the data from the related
    /// datbase, e.g. Teachers contains data about the user
    /// </summary>
    private List<Core.Definitions.Feedback> AllFeedbacks = new();

    private List<Core.Definitions.Feedback> SpecificFeedbacks = new();

    private List<User> Users = new();

    // the values that will be assigned for these are from when the user filters their feedback
    private string? SelectedOption { get; set; } = "";

    private string SelectedTeacherID { get; set; } = "";

    /// <summary>
    /// Sorts the feedbacks based on the specific filter applied
    /// by the user, by rearranging the lists
    /// </summary>
    private void SortBySelected(ChangeEventArgs e)
    {
        if (e != null)
        {
            SelectedOption = e.Value?.ToString();
        }

        if (SelectedOption == "az") // alphabetical
        {
            SpecificFeedbacks = SpecificFeedbacks.OrderBy(f => f.Title).ToList();
        }
        else if (SelectedOption == "za") // reverse alphabetical
        {
            SpecificFeedbacks = SpecificFeedbacks.OrderByDescending(f => f.Title).ToList();
        }
        else if (SelectedOption == "public") // public
        {
            SpecificFeedbacks = AllFeedbacks.Where(feedback => feedback.Visibility.ToString() == "Public").ToList();
        }
        else if (SelectedOption == "private") // private 
        {
            SpecificFeedbacks = AllFeedbacks.Where(feedback => feedback.Visibility.ToString() == "Private").ToList();
        }
    }

    /// <summary>
    /// Creates a new list depending on the username of the teacher,
    /// all feedbacks not associated with that teacher will be excluded
    /// </summary>
    private void SortByTeacher(ChangeEventArgs e)
    {
        SelectedTeacherID = e.Value.ToString();
        if (SelectedTeacherID == "all") // if the user wishes to see all of their feedbacks
        {
            SpecificFeedbacks = new List<Core.Definitions.Feedback>(AllFeedbacks);
        }
        else
        {
            SpecificFeedbacks = AllFeedbacks .Where(f => SelectedTeacherID != null && int.Parse(SelectedTeacherID) == f.AssigneeID) .ToList();
        }
    }

    /// <summary>
    /// Loads all the feedbacks into the two specific feedback lists
    /// by communicating with the API
    /// </summary>
    private async Task LoadAllFeedback(int ID)
    {
        try
        {
            var feedbacks = await FeedbackClientAccess.GetAssignedFeedbacks(ID); // communicates with API
             // different assignments to make sure All and Specific don't point to the same object in memory
             if (feedbacks != null)
             {
                 AllFeedbacks = feedbacks;
                 SpecificFeedbacks = new List<Core.Definitions.Feedback>(feedbacks);
             }
        }
        catch (Exception ex) // feedbacks fails to load
        {
            Log.Error(ex, "Failed to load feedbacks.");
        }
    }

    /// <summary>
    /// Loads the data for people that have assigned feedback to the current user
    /// </summary>
    private async Task LoadAssignees()
    {
        Users.Clear(); // empties teacher
        if (AllFeedbacks != null)
            foreach (var feedback in AllFeedbacks)
            {
                // checks to see if a teacher is already in the list, as otherwise the filter dropdown could be cluttered by the same teacher
                if (Users.All(teach => teach.UserID != feedback.AssigneeID))
                {
                    var user = await UserClientAccess.GetUserByID(feedback.AssigneeID); // gets a single user based on a provided ID
                    try
                    {
                        if (user != null) 
                        {
                            Users.Add(user); // adds to list
                        }
                    }
                    catch (Exception ex) // teachers fails to load
                    {
                        Log.Error(ex,"Failed to load teacher.");
                    }
                }
            }
    }

    private async Task clearNotifications(){
        List<Notification?>? notifications = await UserClientAccess.GetNotification(JAuth.GetUser().UserID);

        if (notifications.Count > 0)
        {
            await UserClientAccess.NotificationDelete(JAuth.GetUser().UserID);

        }
    }
    /// <summary>
    /// Loads the feedback data and teacher data as soon as the page is loaded
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        JAuth.EnforceAuth();
        if (JAuth.IsAuthorised())
        {
            if(JAuth.GetUser()!=null){
                await LoadAllFeedback(JAuth.User.UserID);
                await LoadAssignees();

                // clear notifications
                await clearNotifications();
            }
        }
    }
}