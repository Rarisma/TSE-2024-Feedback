@page "/settings"
@using Application.API
@inject UserAPI UserClientAccess
@rendermode InteractiveServer
@inject JAuth JAuth
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject FeedbackTracker.Services.AppTheme AppTheme

<title>TSE Modules: </title>
<!-- Settings Page Layout-->
<div class="@AppTheme.ColourTheme" Style="position: relative; width: 100%; height: 100%; display: grid; grid-template-rows: auto 1fr; padding: 20px; animation: fadeIn 0.5s ease-in; background-color: var(--main-body);">
    <h3 Style="margin: 0 0 40px 0; font-size: 2.5rem; font-weight: 700; color: #333333; font-family: 'Poppins', sans-serif;">Settings</h3>
 
    <div Style="display: flex; width: 100%; height: 100%; gap: 20px;">
        <!-- Left side: Categories -->
        <div Style="width: 30%; border-radius: 8px; box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); overflow: hidden;">
            <RadzenPanelMenu Style="width: 100%; height: 100%;">
                <RadzenPanelMenuItem Text="General" Icon="settings" Selected="SelectedCategory == SettingsCategory.General" Click="() => SelectCategory(SettingsCategory.General)" Style="padding: 15px; font-family: 'Inter', sans-serif;" />
                <RadzenPanelMenuItem Text="Privacy" Icon="shield" Selected="SelectedCategory == SettingsCategory.Privacy" Click="() => SelectCategory(SettingsCategory.Privacy)" Style="padding: 15px; font-family: 'Inter', sans-serif;" />
                <RadzenPanelMenuItem Text="Notifications" Icon="notifications" Selected="SelectedCategory == SettingsCategory.Notifications" Click="() => SelectCategory(SettingsCategory.Notifications)" Style="padding: 15px; font-family: 'Inter', sans-serif;" />
                <RadzenPanelMenuItem Text="Account" Icon="person" Selected="SelectedCategory == SettingsCategory.Account" Click="() => SelectCategory(SettingsCategory.Account)" Style="padding: 15px; font-family: 'Inter', sans-serif;" />
            </RadzenPanelMenu>
        </div>

        <!-- Right Side: Options -->
        <div Style="width: 70%; border-radius: 8px; box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); background-color: #fff; padding: 25px; overflow-y: auto;">
            @* GENERAL SETTINGS *@
            @if (SelectedCategory == SettingsCategory.General) {
                <div Style="margin-bottom: 20px;">
                    <h2 Style="font-size: 1.8rem; font-weight: 600; margin-bottom: 25px; color: #333; font-family: 'Poppins', sans-serif;">General Settings</h2>
                    <div Style="margin-bottom: 20px;">
                        <RadzenText TextStyle="TextStyle.Subtitle1" Style="font-family: 'Inter', sans-serif; margin-bottom: 10px;">Theme:</RadzenText>
                        <div Style="display: flex; align-items: center; gap: 15px;">
                            <RadzenDropDown TValue="string" @bind-Value="SelectedTheme" TextProperty="Text" ValueProperty="Value" 
                                Style="width: 200px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);" />
                            <RadzenButton Text="Apply" Click="ApplyTheme" ButtonStyle="ButtonStyle.Primary" 
                                Style="padding: 8px 20px; font-weight: 500;" />
                        </div>
                    </div>
                </div> }

            @* PRIVACY SETTINGS *@
            else if (SelectedCategory == SettingsCategory.Privacy) {
                @if (JAuth.IsAuthorised()) {
                    <div Style="margin-bottom: 20px;">
                        <h2 Style="font-size: 1.8rem; font-weight: 600; margin-bottom: 25px; color: #333; font-family: 'Poppins', sans-serif;">Privacy Settings</h2>
                        @if (isDisabled == true)
                        {
                            <div Style="text-align: center;">
                                <p Style="font-size: 1.3rem; font-weight: 500; color: #333;">@MFAButtonText</p>
                                <div Style="border: 1px solid #e0e0e0; padding: 20px; margin: 20px auto; width: 80%; text-align: center; background-color: #f9f9f9; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.05);">
                                    <p Style="font-size: 1rem; margin-bottom: 10px;">To use this code, please use an authenticator (you can find them on Google extensions)</p>
                                    <p Style="font-size: 1rem; margin-bottom: 10px;">Enter the secret (the series of letters and numbers) into the authenticator and enter the code it displays when logging in</p>
                                    <p Style="font-size: 1rem;">Keep in mind that the code only lasts 30 seconds before a new code is generated</p>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div Style="text-align: center;">
                                <div Style="border: 1px solid #e0e0e0; padding: 20px; margin: 0 auto 20px; width: 80%; text-align: center; background-color: #f9f9f9; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.05);">
                                    <p Style="font-size: 1rem; margin-bottom: 10px;">By activating 2FA, you will be required to use an authenticator (which can be found on the google extension store)</p>
                                    <p Style="font-size: 1rem; margin-bottom: 10px;">A secret key will be displayed that you need to add to the authenticator</p>
                                    <p Style="font-size: 1rem;">You SHOULD write this key down as well</p>
                                </div>
                                <RadzenButton Text="Enable 2FA" Click="Click2FA" ButtonStyle="ButtonStyle.Primary" 
                                    Style="padding: 12px 25px; font-size: 1rem; font-weight: 500;" />
                            </div>
                        }
                    </div> }
                else {
                    <div Style="display: flex; justify-content: center; align-items: center; height: 100%;">
                        <div Style="text-align: center;">
                            <img src="/Images/LoginCone.png" alt="Please Log In" Style="width: 250px; height: auto; margin-bottom: 20px;">
                            <p Style="font-size: 1.2rem; color: #555;">Please log in to access privacy settings</p>
                        </div>
                    </div>
            } }
            @* NOTIFICATION SETTINGS *@
            else if (SelectedCategory == SettingsCategory.Notifications)
            {
                <div Style="margin-bottom: 20px;">
                    <h2 Style="font-size: 1.8rem; font-weight: 600; margin-bottom: 25px; color: #333; font-family: 'Poppins', sans-serif;">Notification Settings</h2>
                    <div Style="margin-bottom: 20px;">
                        <RadzenText TextStyle="TextStyle.Subtitle1" Style="font-family: 'Inter', sans-serif; margin-bottom: 10px;">Notification Options:</RadzenText>
                        <RadzenDropDown TValue="string" TextProperty="Text" ValueProperty="Value" 
                            Style="width: 100%; box-shadow: 0 2px 5px rgba(0,0,0,0.1);" />
                    </div>
                </div>
            }
            
            @* ACCOUNT SETTINGS *@ 
            else if (SelectedCategory == SettingsCategory.Account)
            {
                <div Style="margin-bottom: 20px;">
                    <h2 Style="font-size: 1.8rem; font-weight: 600; margin-bottom: 25px; color: #333; font-family: 'Poppins', sans-serif;">Account Settings</h2>
                    
                    @if (JAuth.IsAuthorised())
                    {
                        <div Style="display: grid; gap: 15px;">
                            <div>
                                <RadzenText TextStyle="TextStyle.Subtitle1" Style="font-family: 'Inter', sans-serif; margin-bottom: 5px;">First Name</RadzenText>
                                <RadzenTextBox @bind-Value="FirstName" Placeholder="Change First Name" Style="width: 100%;" MaxLength="25" />
                            </div>
                            <div>
                                <RadzenText TextStyle="TextStyle.Subtitle1" Style="font-family: 'Inter', sans-serif; margin-bottom: 5px;">Last Name</RadzenText>
                                <RadzenTextBox @bind-Value="LastName" Placeholder="Change Last Name" Style="width: 100%;" MaxLength="25" />
                            </div>
                            <div>
                                <RadzenText TextStyle="TextStyle.Subtitle1" Style="font-family: 'Inter', sans-serif; margin-bottom: 5px;">Username</RadzenText>
                                <RadzenTextBox @bind-Value="Username" Placeholder="Change Username" Style="width: 100%;" MaxLength="25" />
                            </div>
                            <div>
                                <RadzenText TextStyle="TextStyle.Subtitle1" Style="font-family: 'Inter', sans-serif; margin-bottom: 5px;">Password</RadzenText>
                                <RadzenPassword @bind-Value="Password" Placeholder="Change Password" Style="width: 100%;" MaxLength="100" />
                            </div>
                            <div>
                                <RadzenText TextStyle="TextStyle.Subtitle1" Style="font-family: 'Inter', sans-serif; margin-bottom: 5px;">Confirm Password</RadzenText>
                                <RadzenPassword @bind-Value="Password" Placeholder="Confirm Password" Style="width: 100%;" MaxLength="100" />
                            </div>
                            <div Style="text-align: center; margin-top: 15px;">
                                <RadzenButton Text="Update Profile" ButtonStyle="ButtonStyle.Primary" 
                                    Style="padding: 10px 30px; font-weight: 500; width: 200px;" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div Style="display: flex; justify-content: center; align-items: center; height: 100%;">
                            <div Style="text-align: center;">
                                <img src="/Images/LoginCone.png" alt="Please Log In" Style="width: 250px; height: auto; margin-bottom: 20px;">
                                <p Style="font-size: 1.2rem; color: #555;">Please log in to access account settings</p>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<style>
    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
</style>

@code {
    //getters and setters for the selected settings category
    private SettingsCategory SelectedCategory { get; set; } = SettingsCategory.General;
    private string SelectedTheme { get; set; } = "theme-light";
    public bool isDisabled = false;
    private string MFAButtonText = "Enable 2fa";
    private void SelectCategory(SettingsCategory category)
    {
        SelectedCategory = category;
    }

    private enum SettingsCategory
    {
        General,
        Privacy,
        Notifications,
        Account
    }

    // colour changer
    private void ApplyTheme()
    {
        if (!string.IsNullOrEmpty(SelectedTheme))
        {
            AppTheme.ColourTheme = SelectedTheme;
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SelectedTheme = AppTheme.ColourTheme;
            StateHasChanged();
        }
    }

    public async void Click2FA()
    {
        UserAPI API = new UserAPI();
        await API.CreateTotpKey(JAuth.User.UserID.ToString(), JAuth.User.Password);
        JAuth.User = await API.GetUserByID(JAuth.User.UserID);
        isDisabled = true;
        MFAButtonText = "2FA Enabled, your code is: " + JAuth.User.MFASecret;
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        JAuth.EnforceAuth();
        SelectedTheme = AppTheme.ColourTheme;
        AppTheme.OnChange += UpdateSelectedTheme;
        StateHasChanged();
    }

    private void UpdateSelectedTheme()
    {
        SelectedTheme = AppTheme.ColourTheme;
        StateHasChanged();
    }

    public void Dispose()
    {
        AppTheme.OnChange -= UpdateSelectedTheme;
    }

    // JAuth for specific account settings
    private string? FirstName { get; set; }
    private string? LastName { get; set; }
    private string? Username { get; set; }
    private string? Password { get; set; }

    private bool isAuthorized;
}
