@page "/feedback"
@using Application.API
@using Core.Definitions
@using Serilog
@rendermode InteractiveServer
@inject JAuth Auth
@inject ModuleAPI ModuleClient
@inject UserAPI UserClient
@inject NavigationManager NavigationManager

<title>TSE Feedback: Create Feedback </title>
<div class="container">
    @if (Auth.IsAuthorised())
    {   <PageTitle>Feedback Page</PageTitle>

        <RadzenCard Style="margin: 5vh auto; max-width: 800px; background: rgba(255, 255, 255, 0.15); backdrop-filter: blur(10px); border-radius: 12px; box-shadow: 0 20px 35px rgba(0, 0, 0, 0.2);">
            <RadzenTemplateForm TItem="@Core.Definitions.Feedback" Data="@_feedback" Submit ="@SendFeedback">
                <!--Title-->
                <RadzenText TextStyle="TextStyle.H3" Style="text-align: center; margin-bottom: 20px; color: #333333;">Create Feedback</RadzenText>
                <!--Name-->
                <div class="mb-3">
                    <RadzenText TextStyle="TextStyle.Subtitle1" Style="display: block; margin-bottom: 10px;">Name:</RadzenText>
                    <RadzenTextBox @bind-Value="_feedback.Title" Name="Title" Placeholder="Enter Feedback Here..." MaxLength="3000" Style="width: 100%; background-color: rgba(255, 255, 255, 0.25); padding: 15px; border-radius: 8px;" />
                    <RadzenRequiredValidator Component="Title" Text="Required" />
                </div>
                <!--Text-->
                <div class="mb-3">
                    <RadzenText TextStyle="TextStyle.Subtitle1" Style="display: block; margin-bottom: 10px;">Feedback Information:</RadzenText>
                    <RadzenTextArea @bind-Value="_feedback.FeedbackText"  Name="Text" Placeholder="Enter Information About Feedback Here..." Style="width: 100%; height: 100px; resize: none; background-color: rgba(255, 255, 255, 0.25); padding: 15px; border-radius: 8px;" MaxLength="8000" />
                    <RadzenRequiredValidator Component="Text" Text="Required" />
                </div>
                <!--Module-->
                <div class="mb-3">
                    <RadzenText TextStyle="TextStyle.Subtitle1" Style="display: block; margin-bottom: 10px;">Feedback Module:</RadzenText>
                    <RadzenDropDown TValue="int" @bind-Value="_feedback.ModuleID" @onchange="ModuleSelected" Data="_modules" 
                    TextProperty="Module" ValueProperty="ModuleID" Name="Module"
                    Style="width: 100%; background-color: rgba(255, 255, 255, 0.25); padding: 10px; border-radius: 8px;" />
                    <RadzenRequiredValidator Component="Module" Text="Required" />
                </div>
                <!--Assign-->

                <div class="mb-3">
                    <RadzenLabel TextStyle="TextStyle.Subtitle1" Style="display: block; margin-bottom: 10px;">Teacher To Assign Feedback:</RadzenLabel>
                    <RadzenDropDown TValue="int?" @bind-Value="_feedback.AssignedUserID" Data="@_users.Where(u => u.IsTeacher)" 
                    TextProperty="Username" ValueProperty="UserID" Name="Assignee"
                    Style="width: 100%; background-color: rgba(255, 255, 255, 0.25); padding: 10px; border-radius: 8px;" />
                    <RadzenRequiredValidator Component="Assignee" Text="Required" />
                </div>

                <!--Label-->
                <div class="mb-3">
                    <RadzenText TextStyle="TextStyle.Subtitle1" Style="display: block; margin-bottom: 10px;">Label:</RadzenText>
                    <RadzenDropDown TValue="Core.Definitions.FeedbackLabel?" @bind-Value="_feedback.Label"
                    Data='@(Enum.GetValues<FeedbackLabel>()
                                        .Select(e => new LabelOption
                                        {
                                            Value = (Core.Definitions.FeedbackLabel?)e,
                                            Text = $"{e}"
                                        }).ToList())'
                    TextProperty="Text"
                    ValueProperty="Value"
                    Name="Label"
                    Style="width: 100%; background-color: rgba(255, 255, 255, 0.25); padding: 10px; border-radius: 8px;" />
                    <RadzenRequiredValidator Component="Label" Text="Required" />
                </div>

                <div class="mb-3">
                    <RadzenText TextStyle="TextStyle.Subtitle1" Style="display: block; margin-bottom: 10px;">Visibility:</RadzenText>
                    <RadzenDropDown TValue="Core.Definitions.FeedbackVisibility" @bind-Value="_feedback.Visibility"
                    Data='@(Enum.GetValues<FeedbackVisibility>()
                                        .Select(e => new VisibiltyOption
                                        {
                                            Value = (Core.Definitions.FeedbackVisibility)e,
                                            Text = $"{e}"
                                        }).ToList())'
                    TextProperty="Text"
                    ValueProperty="Value"
                    Name="Visibility"
                    Style="width: 100%; background-color: rgba(255, 255, 255, 0.25); padding: 10px; border-radius: 8px;" />
                    <RadzenRequiredValidator Component="Visibility" Text="Required" />
                </div>

                <div class="mb-3 text-center">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Submit Feedback"
                    ButtonStyle="ButtonStyle.Primary" 
                    Style="margin: 20px auto; width: 30%; background-color: #5563DE; padding: 12px 20px; color: white; font-weight: 500; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);" />
                </div>
            </RadzenTemplateForm>
        </RadzenCard>

    }
</div>
@code {
    //Goes back to the login page
    private void HomeButton()
    {
        NavigationManager.NavigateTo("/LogIn");
    }

    public class LabelOption
    {
        public Core.Definitions.FeedbackLabel? Value { get; set; }
        public string Text { get; set; }
    }

    public class VisibiltyOption
    {
        public Core.Definitions.FeedbackVisibility Value { get; set; }
        public string Text { get; set; }
    }

    private Core.Definitions.Feedback _feedback = new Core.Definitions.Feedback { Label=0 };


    // get modules
    private List<Modules> _modules = new();

    // assign
    // author of feedback (get current user)
    private User _assignee = new();
    // assigned user
    private int _assignedUserID;

    // get possible users to assign to
    private List<User> _users = new(){ new() { UserID=0, Username="No users"} };


    // get users that can be assigned feedback
    private async Task GetAssignableUsers()
    {
        // Get module teachers.
        List<User?> modUsers = (await ModuleClient.GetUsersInModule(_feedback.ModuleID))!.ToList();

        if(modUsers is { Count: > 0 }) 
        {
            modUsers.RemoveAll(u => u.UserID == Auth.User.UserID);
            _users = modUsers;
            _feedback.AssignedUserID = modUsers[0].UserID;
        }

        StateHasChanged();
    }

    /// <summary>
    /// Updates module (UI)
    /// </summary>
    /// <param name="e"></param>
    private async void ModuleSelected(ChangeEventArgs e)
    {
        _feedback.ModuleID = int.Parse(e.Value?.ToString()!);
        await GetAssignableUsers();
    }

    // getModules (get modules user in / can access)

    private async Task GetModules() {

        List<Modules?>? newModules = await UserClient.GetModules(_assignee.UserID);

        if(newModules != null){
            try
            {
                _modules = newModules;
                _feedback.ModuleID = _modules.First().ModuleID;

            }
            catch (Exception ex)
            {
                Log.Error(ex, "Error getting modules");
            }
        }

        await GetAssignableUsers();
        // refresh ui with new data
        StateHasChanged();
    }


    // sendFeedback function
    private async void SendFeedback(Core.Definitions.Feedback feedback)
    {
        //Create feedback object
        Core.Definitions.Feedback fb = new Core.Definitions.Feedback
        {
            AssignedUserID = feedback.AssignedUserID,
            AssigneeID = _assignee.UserID,
            ModuleID = feedback.ModuleID,
            FeedbackText = feedback.FeedbackText,
            Closed = false,
            Title = feedback.Title,
            Label = feedback.Label,
            Visibility = feedback.Visibility,
            CreatedDate = DateTime.Now
        };
        // Send to API
        Log.Information("Feedback Created: {fb}", fb.Title);
        await new FeedbackAPI().CreateFeedback(fb);
        Log.Information("Posted to server");

        NavigationManager.NavigateTo("/");
    }

    // get logged-in user
    private async Task GetUser()
    {
        if (Auth != null)
        {
            User? user = await UserClient.GetUserByID(Auth.GetUser()!.UserID);
            // return logged user
            if (user != null)
            {
                _assignee = user;
            }
        }
        
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (Auth.IsAuthorised())
        {
            await GetUser();
            await GetModules();
        }
    }
}