@page "/feedback"
@using Application.API
@rendermode InteractiveServer
@inject FeedbackAPI FeedbackCLient
@inject JAuth JAuth
@inject ModuleAPI ModuleClient
@inject UserAPI UserCLient
@inject NavigationManager NavigationManager

<title>TSE Feedback: Create Feedback </title>

@if (JAuth.IsAuthorised()) {
    <PageTitle>Feedback Page</PageTitle>
    <div class="card justify-content-center">
        <div class="card-header">
            <h1 class="card-title text-center">Creating as user: @assignee.Username - Feedback form</h1>
        </div>
        <!-- Feedback form -->
        <div class="card-body">
            <form class="create-form">

                <!--Name-->
                <div class="mb-3">
                    <label for="title">Feedback Name:</label>
                    <input id="title" type="text" @bind="title" placeholder="What is the Feedback Name" class="form-control" />
                </div>

                <!--Text-->
                <div class="mb-3">
                    <label for="text">Feedback Text:</label>
                    <textarea id="text" type="text" @bind="text" placeholder="Write your feedback here" class="form-control" />
                </div>
                <!--module-->
                <div class="mb-3">
                    <label for="module">Feedback module:</label>
                    <select id="module" @onchange="moduleSelected">
                        <!-- add each module to select options-->
                        @if (modules.Count > 0)
                        {
                            for (int i = 0; i < modules.Count; i++)
                            {
                                <option value="@modules[i].ModuleID">@modules[i].Module</option>
                            }
                        }
                        else
                        {
                            <option value="">No modules</option>
                        }


                    </select>
                </div>

                <!--Assign-->
                <div class="mb-3">
                    <label for="assign">Asign to user in module:</label>
                    <select id="assign" @bind=assignedUserID>

                        <!-- add each user to select options-->
                        @if (users.Count > 0)
                        {
                            for (int i = 0; i < users.Count; i++)
                            {
                                <option value="@users[i].UserID">@users[i].Username</option>
                            }
                        }
                        else
                        {
                            <option value="">No users</option>
                        }

                    </select>
                </div>

                <div class="mb-3">
                </div>


                <!--Deadline-->
                <div class="mb-3">
                    <label for="deadline">Deadline:</label>
                    <input id="deadline" type="date" @bind="deadline" min="@DateTime.Now" />
                </div>

                <div class="mb-3">
                    <button class="btn btn-primary mt-2" @onclick="Sendfeedback">send feedback</button>
                </div>
            </form>
        </div>

    </div>
}

//For users that aren't logged in
else
{
    <style>
        body {
            overflow: hidden;
        }
    </style>
    <div class="loggedout">
        <div class="loggedout-msg">
            <img src="/Images/LoginCone.png" alt="Login Required" class="cone-img">
            <h3>Please log in to create feedback.</h3>
            <button class="btn btn-loggedout" @onclick=HomeButton>Return Home</button>
        </div>
    </div>


}

@code {
    //Goes back to the login page
    private void HomeButton()
    {
        NavigationManager.NavigateTo("/LogIn");
    }

    // name
    private string title = string.Empty;
    // text
    private string text = string.Empty;

    // moduleID
    private int moduleID;
    // get modules
    private List<FeedbackTrackerCommon.Definitions.Modules> modules = new List<FeedbackTrackerCommon.Definitions.Modules> { new FeedbackTrackerCommon.Definitions.Modules { ModuleID = 0, Module = "no module" }};

    // deadline
    private DateTime deadline = DateTime.Now;

    // assigne
    // author of feedback (get current user)
    private FeedbackTrackerCommon.Definitions.User assignee = getUser();

    // assigned user
    private int assignedUserID;
    // get possible users to asign to
    private List<FeedbackTrackerCommon.Definitions.User> users = new List<FeedbackTrackerCommon.Definitions.User> { new FeedbackTrackerCommon.Definitions.User { UserID=0,Username="No users"} };

    // get logged in user
    private static FeedbackTrackerCommon.Definitions.User getUser()
    {

        // return logged user
        return JAuth.User;
    }

    // get users that can be assigned feedback
    private async void getAssignableUsers()
    {
        //#TODO get assignable users (within selected module?)

        // Get users

        List<FeedbackTrackerCommon.Definitions.User?>? modusers = await ModuleClient.GetUsersInModule(moduleID);

        if(modusers != null){
            users = modusers;
        }

        StateHasChanged();

    }

    // get users that can be assigned feedback
    private async void moduleSelected(ChangeEventArgs e)
    {

        // Get users

        moduleID = int.Parse(e.Value?.ToString());

        getAssignableUsers();


    }

    // getModules (get modules user in / can access)

    private async Task GetModules() {

        //#TODO get modules user is in

        List<FeedbackTrackerCommon.Definitions.Modules?>? newmodules = await UserCLient.GetModules(assignee.UserID);

        if(newmodules != null){
            try
            {
                modules = newmodules;
                moduleID = modules.First().ModuleID;
            }
            catch{}
    }

        getAssignableUsers();
        // refresh ui with new data
        StateHasChanged();
    }


    // sendFeedback function
    private async void Sendfeedback()
    {

        FeedbackTrackerCommon.Definitions.Feedback fb = new FeedbackTrackerCommon.Definitions.Feedback();

        /*
        assign feedback
        */

        // fb.FeedbackID; Feedback ID auto increment on insert
        fb.AssignedUserID = assignedUserID; // ID of user the feedback is assigned to.
        fb.AssigneeID = assignee.UserID; // ID of user thats logged in 
        fb.ModuleID = moduleID; // ID of associated module
        fb.FeedbackText = text; // text of feedback
        fb.Closed = false; // Feedback starts open (close would be completed)
        fb.Title = title; // Name of feedback
        fb.Priority = 5; //#TODO calaculate inital priority based on deadline date
        fb.Deadline = deadline; // date feedback is due / response needed by

        // fb.AssignedUSer;

        // fb.Assignee;

        // fb.Module;





        //Console.WriteLine(fb.Title); // log

        // call api createfeedback
        string apiFeedback = await new FeedbackAPI().CreateFeedback(fb);

        //Console.WriteLine(apiFeedback); // log
    }

    public Feedback(){

    }

    protected override async Task OnInitializedAsync()
    {
        
        if (JAuth.IsAuthorised())
        {   
            await GetModules();
        }
    }
}