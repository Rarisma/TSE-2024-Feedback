@page "/feedback"
@rendermode InteractiveServer

<PageTitle>Feedback Page</PageTitle>

<h1>Feedback form</h1>
<!-- Feedback form -->
<form class="create-form">

<!--Name-->
<label for="title">Feedback Name:</label>
<input id="title" type="text" @bind="title" placeholder="What is the Feedback Name" class="form-control" />

<!--Text-->
<label for="text">Feedback Text:</label>
<input id="text" type="text" @bind="text" placeholder="Write your feedback here" class="form-control" />

<!--module-->
<label for="module">Feedback module:</label>
<select id="module" @bind=moduleID>
    <!-- add each module to select options-->
        @if(modules.Count > 0)
        {
            for (int i = 0; i < modules.Count; i++)
            {
                <option value="@modules[i].ModuleID">module: @modules[i].Module</option>
            }
        }else{
            <option>No modules</option>
        }
        

</select>

    <!--Assign-->
    <label for="assign">Asign feedback:</label>
    <select id="assign" @bind=assignedUser.UserID>
        <!-- add each user to select options-->
        @if (users.Count > 0)
        {
            for (int i = 0; i < users.Count; i++)
            {
                <option value="@users[i].UserID">@users[i].Username</option>
            }
        }
        else
        {
            <option>No users</option>
        }


    </select>

<!--Deadline-->
<label for="deadline">Deadline: @deadline</label>
    <input id="deadline" type="date" @bind="deadline" min="@DateTime.Now" />


<button class="btn btn-primary mt-2" @onclick="Sendfeedback">send feedback</button>

</form>



@code {

    // name
    private string title = string.Empty;
    // text
    private string text = string.Empty;

    // moduleID
    private int moduleID;

    // get modules
    private List<FeedbackTrackerCommon.Definitions.Modules> modules = new List<FeedbackTrackerCommon.Definitions.Modules> { new FeedbackTrackerCommon.Definitions.Modules { ModuleID = 1, Module = 2811 }, new FeedbackTrackerCommon.Definitions.Modules { ModuleID = 2, Module = 2804 }, new FeedbackTrackerCommon.Definitions.Modules {ModuleID=67,Module=2803 } };

    // deadline
    private DateTime? deadline = DateTime.Now;

    // assigne
    // author of feedback (get current user)
    private FeedbackTrackerCommon.Definitions.User assignee = getUser();

    // get possible users to asign to
    private List<FeedbackTrackerCommon.Definitions.User> users = getAssignableUsers();

    // assigned user
    private FeedbackTrackerCommon.Definitions.User assignedUser = getUser(); // change

    // get logged in user
    private static FeedbackTrackerCommon.Definitions.User getUser()
    {
        return new FeedbackTrackerCommon.Definitions.User {UserID=69,Username="test_loggedUser" };
    }

    // get users that can be assigned feedback
    private static List<FeedbackTrackerCommon.Definitions.User> getAssignableUsers()
    {
        return new List<FeedbackTrackerCommon.Definitions.User> { new FeedbackTrackerCommon.Definitions.User { UserID = 7, Username = "sam" }, new FeedbackTrackerCommon.Definitions.User { UserID = 3, Username = "david" } };
    }


    // sendFeedback function
    private async void Sendfeedback()
    {
        
        FeedbackTrackerCommon.Definitions.Feedback fb = new FeedbackTrackerCommon.Definitions.Feedback();

        /*
          assign feedback
         */

        // fb.FeedbackId; ??  generate
        fb.AssignedUserID = assignedUser.UserID;
        fb.AssigneeID = assignee.UserID;
        fb.ModuleID = moduleID;
        fb.FeedbackText = text;
        fb.Closed = false;
        fb.Title = title;
        fb.Priority = 5;
        // fb.AssignedUSer;
        // fb.Assignee;
        // fb.Module;

        // fb.Deadline = deadline ???

        Console.WriteLine(fb.Title);

        // call api createfeedback
        string apiFeedback = await new FeedbackApiClient("http://localhost:5189").CreateFeedback(fb);

        Console.WriteLine(apiFeedback);
    }
}