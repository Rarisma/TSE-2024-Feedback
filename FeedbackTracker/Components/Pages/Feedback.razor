@page "/feedback"
@using Application.API
@using Core.Definitions
@using Serilog
@rendermode InteractiveServer
@inject JAuth Auth
@inject ModuleAPI ModuleClient
@inject UserAPI UserClient
@inject NavigationManager NavigationManager

<title>TSE Feedback: Create Feedback </title>

@if (Auth.IsAuthorised())
{
    <PageTitle>Feedback Page</PageTitle>
    <div class="create-feedback">
    <h3>Create Feedback</h3>
        <!-- Feedback form -->
        <div class="card-body">
            <!--Name-->
            <div class="mb-3">
                <label for="title" class="first-label">Name:</label>
                <input id="title" type="text" @bind="_title" placeholder="Enter Feedback Here..." maxlength="3000" class="form-control" />
            </div>

            <!--Text-->
            <div class="mb-3">
                <label for="text" class="label-text">Feedback Information:</label>
                <textarea id="text" type="text" @bind="_text" placeholder="Enter Information About Feedback Here..." class="form-control" style="height: 100px; resize: none;" maxlength="8000"></textarea>
            </div>

            <!--Module-->
            <div class="mb-3">
                <label for="module" class="label-text">Feedback Module:</label>
                <select id="module" @onchange="ModuleSelected" class="form-select">
                    @if (_modules.Count > 0)
                    {
                        for (int i = 0; i < _modules.Count; i++)
                        {
                            <option value="@_modules[i].ModuleID">@_modules[i].Module</option>
                        }
                    }
                    else
                    {
                        <option value="">No modules</option>
                    }
                </select>
            </div>

            <!--Assign-->
            <div class="mb-3">
                <label for="assign" class="label-text">Teacher To Assign Feedback:</label>
                <select id="assign" @bind=_assignedUserID class="form-select">
                    @if (_users.Count > 0)
                    {
                        for (int i = 0; i < _users.Count; i++)
                        {
                            if (_users[i].IsTeacher)
                            {
                                <option value="@_users[i].UserID">@_users[i].Username</option>
                            }
                        }
                        <option value="">No Teacher</option>

                    }
                </select>
            </div>
                
                <!--Label-->
                <div class="mb-3">
                    <label for="Label">Label:</label>
                    <select id="Label" @bind="_label" class="form-select">
                        <!-- add each module to select options-->
                        <option value="0">@FeedbackLabel.Positive</option>
                        <option value="1">@FeedbackLabel.Improvement</option>
                        <option value="2">@FeedbackLabel.Question</option>
                        <option value="3">@FeedbackLabel.Error</option>

                    </select>
                </div>
                <!--Visibility-->
                <div class="mb-3">
                    <label for="Visibility">Visibility:</label>
                    <select id="Visibility" @bind="_visibility" class="form-select">
                        <!-- Select Visibility Options -->
                        <option value="0">@FeedbackVisibility.Public</option>
                        <option value="1">@FeedbackVisibility.Private</option>

                    </select>
                </div>


            <div class="mb-3 text-center">
                <button class="btn btn-primary" @onclick="SendFeedback"  style="min-width: 200px;">Submit Feedback</button>
            </div>
        </div>
    </div>

}

//For users that aren't logged in
else
{

}

@code {
    //Goes back to the login page
    private void HomeButton()
    {
        NavigationManager.NavigateTo("/LogIn");
    }

    private int _label;

    private int _visibility;

    
    // name
    private string _title = string.Empty;
    // text
    private string _text = string.Empty;

    // moduleID
    private int _moduleID;
    // get modules
    private List<Modules> _modules = new();
    
    // assign
    // author of feedback (get current user)
    private User _assignee = new();

    // assigned user
    private int _assignedUserID;
    // get possible users to assign to
    private List<User> _users = new(){ new() { UserID=0, Username="No users"} };


    // get users that can be assigned feedback
    private async Task GetAssignableUsers()
    {
        // Get module teachers.
        List<User?> modUsers = (await ModuleClient.GetUsersInModule(_moduleID))!.ToList();
        
        if(modUsers is { Count: > 0 }) 
        {
            _users = modUsers;
            _assignedUserID = modUsers[0].UserID;
        }

        StateHasChanged();
    }
    
    /// <summary>
    /// Updates module (UI)
    /// </summary>
    /// <param name="e"></param>
    private async void ModuleSelected(ChangeEventArgs e)
    {
        _moduleID = int.Parse(e.Value?.ToString()!);
        await GetAssignableUsers();
    }

    // getModules (get modules user in / can access)

    private async Task GetModules() {

        //TODO get modules user is in

        List<Modules?>? newModules = await UserClient.GetModules(_assignee.UserID);

        if(newModules != null){
            try
            {
                _modules = newModules;
                _moduleID = _modules.First().ModuleID;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Error getting modules");
            }
        }

        await GetAssignableUsers();
        // refresh ui with new data
        StateHasChanged();
    }


    // sendFeedback function
    private async void SendFeedback()
    {
        //Create feedback object
        Core.Definitions.Feedback fb = new Core.Definitions.Feedback
        {
            AssignedUserID = _assignedUserID,
            AssigneeID = _assignee.UserID,
            ModuleID = _moduleID,
            FeedbackText = _text,
            Closed = false,
            Title = _title,
            Label = (FeedbackLabel?)_label,
            Visibility = (FeedbackVisibility)_visibility,
            CreatedDate = DateTime.Now
        };
        // Send to API
        Log.Information("Feedback Created: {fb}", fb.Title);
        await new FeedbackAPI().CreateFeedback(fb);
        Log.Information("Posted to server");
        
        NavigationManager.NavigateTo("/");

    }

    // get logged-in user
    private async Task GetUser()
    {
        if (Auth != null)
        {
            User? user = await UserClient.GetUserByID(Auth.GetUser()!.UserID);
            // return logged user
            if (user != null)
            {
                _assignee = user;
            }
        }
        
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (Auth.IsAuthorised())
        {
            await GetUser();
            await GetModules();
        }
    }
}