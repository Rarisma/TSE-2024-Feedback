@page "/feedback"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Feedback Page</PageTitle>
<div class="card justify-content-center">
    <div class="card-header">
        <h1 class="card-title text-center">Feedback form</h1>
    </div>
    <!-- Feedback form -->
    <div class="card-body">
        <form class="create-form">

            <!--Name-->
            <div class="mb-3">
                <label for="title">Feedback Name:</label>
                <input id="title" type="text" @bind="title" placeholder="What is the Feedback Name" class="form-control" />
            </div>

            <!--Text-->
            <div class="mb-3">
                <label for="text">Feedback Text:</label>
                <textarea id="text" type="text" @bind="text" placeholder="Write your feedback here" class="form-control" />
            </div>
            <!--module-->
            <div class="mb-3">
                <label for="module">Feedback module:</label>
                <select id="module" @bind="moduleID">

                    <!-- add each module to select options-->
                    @if (modules.Count > 0)
                    {
                        for (int i = 0; i < modules.Count; i++)
                        {
                            <option value="@modules[i].ModuleID">module: @modules[i].Module</option>
                        }
                    }
                    else
                    {
                        <option value="">No modules</option>
                    }


                </select>
            </div>

            <!--Assign-->
            <div class="mb-3">
                <label for="assign">Asign feedback:</label>
                <select id="assign" @bind=assignedUserID>

                    <!-- add each user to select options-->
                    @if (users.Count > 0)
                    {
                        for (int i = 0; i < users.Count; i++)
                        {
                            <option value="@users[i].UserID">@users[i].Username</option>
                        }
                    }
                    else
                    {
                        <option value="">No users</option>
                    }

                </select>
            </div>

            <div class="mb-3">
            </div>


            <!--Deadline-->
            <div class="mb-3">
                <label for="deadline">Deadline:</label>
                <input id="deadline" type="date" @bind="deadline" min="@DateTime.Now" />
            </div>

            <div class="mb-3">
                <button class="btn btn-primary mt-2" @onclick="Sendfeedback">send feedback</button>
            </div>
        </form>
    </div>

</div>




@code {

    // name
    private string title = string.Empty;
    // text
    private string text = string.Empty;

    // moduleID
    private int moduleID;

    // get modules
    private List<FeedbackTrackerCommon.Definitions.Modules> modules = new List<FeedbackTrackerCommon.Definitions.Modules> { new FeedbackTrackerCommon.Definitions.Modules { ModuleID = 1, Module = "Mathmatics" }};

    // deadline
    private DateTime deadline = DateTime.Now;

    // assigne
    // author of feedback (get current user)
    private FeedbackTrackerCommon.Definitions.User assignee = getUser();

    // get possible users to asign to
    private List<FeedbackTrackerCommon.Definitions.User> users = getAssignableUsers();

    // assigned user
    private int assignedUserID;
    //private FeedbackTrackerCommon.Definitions.User assignedUser = getUser();

    // get logged in user
    private static FeedbackTrackerCommon.Definitions.User getUser()
    {
        // create test user
        return new FeedbackTrackerCommon.Definitions.User {UserID=3,Username="test_loggedUser" };
    }

    // get users that can be assigned feedback
    private static List<FeedbackTrackerCommon.Definitions.User> getAssignableUsers()
    {
        // create test data
        return new List<FeedbackTrackerCommon.Definitions.User> {new FeedbackTrackerCommon.Definitions.User { UserID = 4, Username = "david" } };
    }


    // sendFeedback function
    private async void Sendfeedback()
    {

        FeedbackTrackerCommon.Definitions.Feedback fb = new FeedbackTrackerCommon.Definitions.Feedback();

        /*
        assign feedback
        */

        //fb.FeedbackID; do not set auto created in database
        fb.AssignedUserID = assignedUserID;
        fb.AssigneeID = assignee.UserID;
        fb.ModuleID = moduleID;
        fb.FeedbackText = text;
        fb.Closed = false;
        fb.Title = title;
        fb.Priority = 5; // get priority based of deadline
        fb.Deadline = deadline;

        // fb.AssignedUSer;

        // fb.Assignee;

        // fb.Module;



        

        Console.WriteLine(fb.Title); // log

        // call api createfeedback
        string apiFeedback = await new FeedbackApiClient("http://localhost:5189").CreateFeedback(fb);

        Console.WriteLine(apiFeedback); // log
    }
}