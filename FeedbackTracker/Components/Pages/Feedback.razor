@page "/feedback"
@using System.Data.SqlTypes
@using Application.API
@using FeedbackTrackerCommon.Definitions
@rendermode InteractiveServer
@inject FeedbackAPI FeedbackCLient
@inject JAuth Auth
@inject ModuleAPI ModuleClient
@inject UserAPI UserCLient
@inject NavigationManager NavigationManager

<title>TSE Feedback: Create Feedback </title>

@if (Auth.IsAuthorised())
{
    <PageTitle>Feedback Page</PageTitle>
    <div class="create-feedback">
    <h3>Create Feedback</h3>
        <!-- Feedback form -->
        <div class="card-body">
            <!--Name-->
            <div class="mb-3">
                <label for="title" class="first-label">Name:</label>
                <input id="title" type="text" @bind="title" placeholder="Enter Feedback Here..." class="form-control" />
            </div>

            <!--Text-->
            <div class="mb-3">
                <label for="text" class="label-text">Feedback Information:</label>
                <textarea id="text" type="text" @bind="text" placeholder="Enter Information About Feedback Here..." class="form-control" style="height: 100px; resize: none;" maxlength="8000"></textarea>
            </div>

            <!--Module-->
            <div class="mb-3">
                <label for="module" class="label-text">Feedback Module:</label>
                <select id="module" @onchange="moduleSelected" class="form-select">
                    @if (modules.Count > 0)
                    {
                        for (int i = 0; i < modules.Count; i++)
                        {
                            <option value="@modules[i].ModuleID">@modules[i].Module</option>
                        }
                    }
                    else
                    {
                        <option value="">No modules</option>
                    }
                </select>
            </div>

            <!--Assign-->
            <div class="mb-3">
                <label for="assign" class="label-text">Teacher To Assign Feedback:</label>
                <select id="assign" @bind=assignedUserID class="form-select">
                    @if (users.Count > 0)
                    {
                        for (int i = 0; i < users.Count; i++)
                        {
                            if (users[i].IsTeacher)
                            {
                                <option value="@users[i].UserID">@users[i].Username</option>
                            }
                        }
                        <option value="0">No Teacher</option>

                    }
                </select>
            </div>
                
                <!--Label-->
                <div class="mb-3">
                    <label for="Label">Label:</label>
                    <select id="Label" @bind="Label" class="form-select">
                        <!-- add each module to select options-->
                        <option value="0">@FeedbackLabel.Positive</option>
                        <option value="1">@FeedbackLabel.Improvement</option>
                        <option value="2">@FeedbackLabel.Question</option>
                        <option value="3">@FeedbackLabel.Error</option>

                    </select>
                </div>
            </div>
            <button class="btn btn-primary" @onclick="Sendfeedback" style="min-width: 200px; margin: 0 auto; display: block;">Submit Feedback</button>
        </div>
}

//For users that aren't logged in
else
{
    <style>
        body {
            overflow: hidden;
        }
    </style>
    <div class="loggedout">
        <div class="loggedout-msg">
            <img src="/Images/LoginCone.png" alt="Login Required" class="cone-img">
            <h2>Please log in to create feedback.</h2>
            <button class="btn btn-loggedout" @onclick=HomeButton>Return Home</button>
        </div>
    </div>
}

@code {
    //Goes back to the login page
    private void HomeButton()
    {
        NavigationManager.NavigateTo("/LogIn");
    }

    private int Label;
    
    // name
    private string title = string.Empty;
    // text
    private string text = string.Empty;

    // moduleID
    private int moduleID;
    // get modules
    private List<FeedbackTrackerCommon.Definitions.Modules> modules = new List<FeedbackTrackerCommon.Definitions.Modules>();
    
    // assigne
    // author of feedback (get current user)
    private FeedbackTrackerCommon.Definitions.User assignee = new FeedbackTrackerCommon.Definitions.User { };

    // assigned user
    private int assignedUserID;
    // get possible users to asign to
    private List<FeedbackTrackerCommon.Definitions.User> users = new List<FeedbackTrackerCommon.Definitions.User> { new FeedbackTrackerCommon.Definitions.User { UserID=0,Username="No users"} };


    // get users that can be assigned feedback
    private async void getAssignableUsers()
    {
        // Get module teachers.
        List<FeedbackTrackerCommon.Definitions.User?>? modusers = (await ModuleClient.GetUsersInModule(moduleID))
           .ToList();
        
        if(modusers != null && modusers.Count>0){
            users = modusers;
            assignedUserID = modusers[0].UserID;
        }

        StateHasChanged();

    }

    // get users that can be assigned feedback
    private async void moduleSelected(ChangeEventArgs e)
    {

        // Get users

        moduleID = int.Parse(e.Value?.ToString());
        getAssignableUsers();


    }

    // getModules (get modules user in / can access)

    private async Task GetModules() {

        //#TODO get modules user is in

        List<FeedbackTrackerCommon.Definitions.Modules?>? newmodules = await UserCLient.GetModules(assignee.UserID);

        if(newmodules != null){
            try
            {
                modules = newmodules;
                moduleID = modules.First().ModuleID;
            }
            catch{}
        }

        getAssignableUsers();
        // refresh ui with new data
        StateHasChanged();
    }


    // sendFeedback function
    private async void Sendfeedback()
    {

        FeedbackTrackerCommon.Definitions.Feedback fb = new FeedbackTrackerCommon.Definitions.Feedback();

        /*
        assign feedback
        */

        // fb.FeedbackID; Feedback ID auto increment on insert
        fb.AssignedUserID = assignedUserID; // ID of user the feedback is assigned to.
        fb.AssigneeID = assignee.UserID; // ID of user thats logged in 
        fb.ModuleID = moduleID; // ID of associated module
        fb.FeedbackText = text; // text of feedback
        fb.Closed = false; // Feedback starts open (close would be completed)
        fb.Title = title; // Name of feedback
        // fb.AssignedUSer;

        // fb.Assignee;

        // fb.Module;





        //Console.WriteLine(fb.Title); // log

        // call api createfeedback
        string apiFeedback = await new FeedbackAPI().CreateFeedback(fb);

        //Console.WriteLine(apiFeedback); // log
        NavigationManager.NavigateTo("/");

    }

    // get logged in user
    private async Task getUser()
    {
        FeedbackTrackerCommon.Definitions.User? user = await UserCLient.GetUserByID(Auth.GetUser().UserID);
        // return logged user
        assignee = user;
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (Auth.IsAuthorised())
        {
            await getUser();
            await GetModules();
        }
    }
}