@page "/feedback"
@using Application.API
@using Core.Definitions
@using Serilog
@rendermode InteractiveServer
@inject JAuth Auth
@inject ModuleAPI ModuleClient
@inject UserAPI UserClient
@inject NavigationManager NavigationManager

<title>TSE Feedback: Create Feedback </title>
<div class="container">
@if (Auth.IsAuthorised())
{   <PageTitle>Feedback Page</PageTitle>
            <!--Name-->
        <RadzenCard Style="margin: 5vh auto; max-width: 800px; background: rgba(255, 255, 255, 0.15); backdrop-filter: blur(10px); border-radius: 12px; box-shadow: 0 20px 35px rgba(0, 0, 0, 0.2);">
        <RadzenText TextStyle="TextStyle.H3" Style="text-align: center; margin-bottom: 20px; color: #333333;">Create Feedback</RadzenText>
            <!--Text-->
        <div class="mb-3">
            <RadzenText TextStyle="TextStyle.Subtitle1" Style="display: block; margin-bottom: 10px;">Name:</RadzenText>
            <RadzenTextBox @bind-Value="_title" Placeholder="Enter Feedback Here..." MaxLength="3000" Style="width: 100%; background-color: rgba(255, 255, 255, 0.25); padding: 15px; border-radius: 8px;" />
        </div>
            <!--Module-->
        <div class="mb-3">
            <RadzenText TextStyle="TextStyle.Subtitle1" Style="display: block; margin-bottom: 10px;">Feedback Information:</RadzenText>
            <RadzenTextArea @bind-Value="_text" Placeholder="Enter Information About Feedback Here..." Style="width: 100%; height: 100px; resize: none; background-color: rgba(255, 255, 255, 0.25); padding: 15px; border-radius: 8px;" MaxLength="8000" />
        </div>

        <div class="mb-3">
            <RadzenText TextStyle="TextStyle.Subtitle1" Style="display: block; margin-bottom: 10px;">Feedback Module:</RadzenText>
            <RadzenDropDown TValue="int" @onchange="ModuleSelected" Data="_modules" 
                            TextProperty="Module" ValueProperty="ModuleID" 
                            Style="width: 100%; background-color: rgba(255, 255, 255, 0.25); padding: 10px; border-radius: 8px;" />
        </div>
            <!--Assign-->
        <div class="mb-3">
            <RadzenText TextStyle="TextStyle.Subtitle1" Style="display: block; margin-bottom: 10px;">Teacher To Assign Feedback:</RadzenText>
            <RadzenDropDown TValue="int" @bind-Value="_assignedUserID" Data="@_users.Where(u => u.IsTeacher)" 
                            TextProperty="Username" ValueProperty="UserID" 
                            Style="width: 100%; background-color: rgba(255, 255, 255, 0.25); padding: 10px; border-radius: 8px;" />
        </div>
                
                <!--Label-->
        <div class="mb-3">
            <RadzenText TextStyle="TextStyle.Subtitle1" Style="display: block; margin-bottom: 10px;">Label:</RadzenText>
            <RadzenDropDown TValue="int" @bind-Value="_label" 
                            Data='@(Enum.GetValues(typeof(FeedbackLabel)))' 
                            Style="width: 100%; background-color: rgba(255, 255, 255, 0.25); padding: 10px; border-radius: 8px;" />
        </div>
                
        <div class="mb-3">
            <RadzenText TextStyle="TextStyle.Subtitle1" Style="display: block; margin-bottom: 10px;">Visibility:</RadzenText>
            <RadzenDropDown TValue="int" @bind-Value="_visibility" 
                            Data='@(Enum.GetValues(typeof(FeedbackVisibility)))' 
                            Style="width: 100%; background-color: rgba(255, 255, 255, 0.25); padding: 10px; border-radius: 8px;" />
        </div>

        <div class="mb-3 text-center">
            <RadzenButton Text="Submit Feedback" Click="SendFeedback" 
                          ButtonStyle="ButtonStyle.Primary" 
                          Style="margin: 20px auto; width: 30%; background-color: #5563DE; padding: 12px 20px; color: white; font-weight: 500; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);" />
        </div>
    </RadzenCard>
}
</div>
@code {
    //Goes back to the login page
    private void HomeButton()
    {
        NavigationManager.NavigateTo("/LogIn");
    }

    private int _label;

    private int _visibility;

    
    // name
    private string _title = string.Empty;
    // text
    private string _text = string.Empty;

    // moduleID
    private int _moduleID;
    // get modules
    private List<Modules> _modules = new();
    
    // assign
    // author of feedback (get current user)
    private User _assignee = new();

    // assigned user
    private int _assignedUserID;
    // get possible users to assign to
    private List<User> _users = new(){ new() { UserID=0, Username="No users"} };


    // get users that can be assigned feedback
    private async Task GetAssignableUsers()
    {
        // Get module teachers.
        List<User?> modUsers = (await ModuleClient.GetUsersInModule(_moduleID))!.ToList();
        
        if(modUsers is { Count: > 0 }) 
        {
            _users = modUsers;
            _assignedUserID = modUsers[0].UserID;
        }

        StateHasChanged();
    }
    
    /// <summary>
    /// Updates module (UI)
    /// </summary>
    /// <param name="e"></param>
    private async void ModuleSelected(ChangeEventArgs e)
    {
        _moduleID = int.Parse(e.Value?.ToString()!);
        await GetAssignableUsers();
    }

    // getModules (get modules user in / can access)

    private async Task GetModules() {

        //TODO get modules user is in

        List<Modules?>? newModules = await UserClient.GetModules(_assignee.UserID);

        if(newModules != null){
            try
            {
                _modules = newModules;
                _moduleID = _modules.First().ModuleID;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Error getting modules");
            }
        }

        await GetAssignableUsers();
        // refresh ui with new data
        StateHasChanged();
    }


    // sendFeedback function
    private async void SendFeedback()
    {
        //Create feedback object
        Core.Definitions.Feedback fb = new Core.Definitions.Feedback
        {
            AssignedUserID = _assignedUserID,
            AssigneeID = _assignee.UserID,
            ModuleID = _moduleID,
            FeedbackText = _text,
            Closed = false,
            Title = _title,
            Label = (FeedbackLabel?)_label,
            Visibility = (FeedbackVisibility)_visibility,
            CreatedDate = DateTime.Now
        };
        // Send to API
        Log.Information("Feedback Created: {fb}", fb.Title);
        await new FeedbackAPI().CreateFeedback(fb);
        Log.Information("Posted to server");
        
        // create notification
        await UserClient.NotificationPost(_assignedUserID, "New Feedback", $"created: {fb.Title}");

        NavigationManager.NavigateTo("/");

    }

    // get logged-in user
    private async Task GetUser()
    {
        if (Auth != null)
        {
            User? user = await UserClient.GetUserByID(Auth.GetUser()!.UserID);
            // return logged user
            if (user != null)
            {
                _assignee = user;
            }
        }
        
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (Auth.IsAuthorised())
        {
            await GetUser();
            await GetModules();
        }
    }
}