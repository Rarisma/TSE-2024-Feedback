@page "/extension/{FeedbackID}"
@rendermode InteractiveServer
@using FeedbackTrackerCommon.Definitions
@using Application
@using Application.API
@inject FeedbackAPI FeedbackClientAccess
@inject JAuth JAuth

@{
	<div>
		<h3>Select Extensions To View</h3>
		<div style="margin: 20px 0">
			<button @onclick='() => extensionTab = "to review"'>Pending</button>
			<button @onclick='() => extensionTab = "accepted"'>Accepted</button>
			<button @onclick='() => extensionTab = "declined"'>Declined</button>		
			<button class="btn btn-primary mt-2" @onclick=ChangeExtensionView>
				Extension request @if (extensionView)
				{
					<span>v</span>
				}
				else
				{
					<span>></span>
				}
			</button>
		</div>

		@if(@SelectedFeedback != null){
			<div class="card">
			<div class="card-body">
			<p class="card-text">Feedback: @SelectedFeedback.Title | Deadline: @SelectedFeedback.Deadline | For user id: @SelectedFeedback.AssignedUserID</p>
			</div>
			</div>
		}


	</div>





	@if (extensionView == true) // check extension toggle then display extension form {length,reason,submit button}
	{
		<div id="extensionForm" class="card">
			<form class="flex-column">

				<div class="card-header">
					<h3 class="card-text"> Extension request</h3>
				</div>
				<div class="card-body">

					<div class="card-text">
						<label for="length">Length: </label>
						<input name="length" type="number" min="1" max="10" placeholder="1" @bind=newExtension.Length />
					</div>
					<div class="card-text flex-row">
						<label for="reason">reason:</label>
						<textarea name="reason" placeholder="reason" @bind=newExtension.Reason></textarea>
					</div>
				</div>

				<div>
					<button name="extensionButton" @onclick=requestExtension> Send request </button>
				</div>
			</form>
		</div>

	}

	@if (extensions != null)// if extensions are found
	{
		@foreach (Extension extension in extensions)// display extension {status,reason,length,accept/decline buttons}
		{
			@if(extension.Status == extensionTab){
			<div class="card">
				<div class="card-header">
					<h3 class="card-text">ExtensionID : @extension.ExtensionId</h3>
				</div>

				<div class="card-body">
					<p>Status: @extension.Status</p>
					<p>Reason: @extension.Reason</p>
					<p>Extra time amount: @extension.Length</p>

					@if (extension.Status == "to review")
					{
						<button @onclick='() => {extension.Status="accepted"; deadlineResponse(extension);}'>accept</button>
						<button @onclick='() => {extension.Status="declined"; deadlineResponse(extension);}'>decline</button>
					}
				</div>
				</div>
			}
		}
	}

	<NavLink class="btn btn-primary" href="usersfeedback">Back</NavLink>
}
@code {

	private FeedbackTrackerCommon.Definitions.Feedback SelectedFeedback;

	// extensions from feedback
	private List<FeedbackTrackerCommon.Definitions.Extension>? extensions;

	// store a new extension
	private FeedbackTrackerCommon.Definitions.Extension newExtension = new Extension { };

	// show extension toggle
	private bool extensionView = false;
	private string extensionTab = "to review";

	[Parameter]
	public string FeedbackID { get; set; }

	/// <summary>
	/// Hide / show extensions
	/// </summary>
	private void ChangeExtensionView()
	{
		extensionView = !extensionView;
		StateHasChanged();
	}

	/// <summary>
	/// Create a new extension
	/// </summary>
	private async void requestExtension()
	{
		// add extension request

		newExtension.FeedbackId = SelectedFeedback.FeedbackID;
		newExtension.Status = "to review";

		//Console.WriteLine(fb.Title); // log

		// call api createfeedback
		string apiFeedback = await FeedbackClientAccess.CreateExtension(newExtension);

		Console.WriteLine(apiFeedback); // log
	}

	/// <summary>
	/// Deadline accepted
	/// </summary>
	/// <param name="extension">extension that has been accepted</param>
	private async void deadlineResponse(Extension extension)
	{
		if (extension.Status == "accepted")
		{
			// feedback deadline
			SelectedFeedback.Deadline = SelectedFeedback.Deadline.Add(new TimeSpan(extension.Length, 0, 0, 0)); // update deadline

			// update feedback in db
			await FeedbackClientAccess.UpdateFeedback(SelectedFeedback);
		}

		// update extension
		await FeedbackClientAccess.UpdateExtension(extension);
		StateHasChanged();
	}

	private async Task LoadFeedback(int ID)
	{
		SelectedFeedback = await FeedbackClientAccess.GetFeedbackByID(ID);

		if (SelectedFeedback != null)

		{

			extensions = await FeedbackClientAccess.GetExtensions(SelectedFeedback.FeedbackID);

			StateHasChanged();


		}
		else { Console.WriteLine("Failed to load feedback."); }
	}

	protected override async Task OnInitializedAsync()
	{
		await LoadFeedback(int.Parse(FeedbackID));
	}
}
