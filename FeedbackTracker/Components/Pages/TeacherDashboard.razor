@page "/TeacherDashboard"
@using Application.API
@using Core.Definitions
@rendermode InteractiveServer
@inject ModuleAPI ModuleClient
@inject FeedbackAPI FeedbackClientAccess
@inject JAuth JAuth

<title>TSE Modules: Create Module</title>

@if (JAuth.IsAuthorised())
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 90vh; flex-direction: column;">
        <h3 class="text-center mb-4" style="font-family: 'Lato', sans-serif; color: #4A4A4A;">
            Teacher Dashboard - Module Management
        </h3>

        <div class="container mt-5">
            <div class="row justify-content-center">
                <div class="col-md-8">
                    <!-- Create Module Card -->
                    <div class="card mb-4">
                        <div class="card-header bg-primary text-white text-center">
                            <h5 class="mb-0">Create Module</h5>
                        </div>
                        <div class="card-body">
                            <p class="text-center">Logged in as: <strong>@assignee.Username</strong></p>
                            <form>
                                <div class="mb-3">
                                    <label for="moduleName" class="form-label">Module Name</label>
                                    <input id="moduleName" type="text" class="form-control" @bind="moduleName" placeholder="Enter module name">
                                </div>
                                <div class="d-grid">
                                    <button class="btn btn-success" @onclick="SendModule">Create Module</button>
                                </div>
                            </form>
                        </div>
                    </div>

                    <!-- Assign Module Card -->
                    <div class="card">
                        <div class="card-header bg-primary text-white text-center">
                            <h5 class="mb-0">Assign Module to User</h5>
                        </div>
                        <div class="card-body">
                            <form>
                                <div class="mb-3">
                                    <label for="userSelect" class="form-label">Select User</label>
                                    <select id="userSelect" class="form-control" @bind="selectedUserId">
                                        @foreach (var user in users)
                                        {
                                            <option value="@user.UserID">@user.Username</option>
                                        }
                                    </select>
                                </div>

                                <div class="mb-3">
                                    <label for="moduleSelect" class="form-label">Select Module</label>
                                    <select id="moduleSelect" class="form-control" @bind="selectedModuleId">
                                        @foreach (var module in modules)
                                        {
                                            <option value="@module.ModuleID">@module.Module</option>
                                        }
                                    </select>
                                </div>

                                <div class="d-grid">
                                    <button type="button" class="btn btn-primary">Assign Module</button>
                                </div>
                            </form>
                        </div>
                    </div>

                </div> 
            </div> 
        </div> 
    </div> 
}

@code {



    private int moduleID;
    private string moduleName;

    private List<User> users = new();
    private int selectedUserId;
    private string selectedModuleId;
    private List<Modules> modules = new();

    private User SelectedUser;
    
    // assigne
    // author of feedback (get current user)
    private User? assignee;

    // Module Creation
    private async void SendModule()
    {
        // Create a new module object
        Modules newModule = new();

        newModule.ModuleID = moduleID;
        newModule.Module = moduleName;

        await ModuleClient.CreateModule(newModule);
    }

    private async Task LoadUsers()
    {
        var AllUsers = await FeedbackClientAccess.GetAllUsersAsync();

        if (AllUsers != null)
        {
            users = AllUsers;
        }
        else
        {
            Console.WriteLine("Failed to load users.");
        }
    }

   

    protected override async Task OnInitializedAsync()
    {

        JAuth.EnforceAuth();
        if(JAuth.IsAuthorised()){
        assignee = JAuth.User;
        await LoadUsers();
        }

    }
}