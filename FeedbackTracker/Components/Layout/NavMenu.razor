@using Core.Definitions
@inject JAuth Auth
@inject NavigationManager NavigationManager
@inject API.UserAPI UserClient
@rendermode InteractiveServer
@inject IJSRuntime Js


<input type="checkbox" title="Navigation menu" class="navbar-toggler" />
<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <div class="navbar-toggler-wrapper">
        <input type="checkbox" title="Navigation menu" class="navbar-toggler" />
        <div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
	        <nav class="flex-column">
		        <div class="nav-item px-3">
			        <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
				        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
			        </NavLink>
		        </div>
		        @if (Auth.IsAuthorised())
		        {
			        <div class="nav-item px-3">
				        <NavLink class="nav-link" href="feedback">
					        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Create Feedback
				        </NavLink>
			        </div>
			        <div class="nav-item px-3">
				        <NavLink class="nav-link" href="usersfeedback">
					        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Your Feedback @if (New_Feedback)
					                                                                                          {
						                                                                                          <span class="notification"> 🔔 </span>
						                                                                                          playsound = true;
					                                                                                          }
					                                                                                          else
					                                                                                          {

						                                                                                          <span></span>

						                                                                                          playsound = false;
						                                                                                          <span></span>;

					                                                                                          }
				        </NavLink>
			        </div>

			        <!-- Change to IsTeacher later -->
			        @if (user != null && user.IsTeacher)
			        {
				        <div class="nav-item px-3">
					        <NavLink class="nav-link" href="TeacherDashboard">
						        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Teacher Dashboard
					        </NavLink>
				        </div>
			        }
		        }
	        </nav>
	        <!-- Buttons for login/signup/account management -->
			<div class="login-buttons px-3 pb-3">
				@if (Auth.IsAuthorised())
				{
					<NavLink class="btn btn-primary mb-2 w-100" href="/settings">Settings</NavLink>
					<NavLink class="btn btn-primary mb-2 w-100" href="/contact">Contact </NavLink>
					<NavLink class="btn btn-primary mb-2 w-100" href="/Logout">Log Out</NavLink>
				}
				else
				{
					<NavLink class="btn btn-primary mb-2 w-100" href="/settings">Settings</NavLink>
					<NavLink class="btn btn-primary mb-2 w-100" href="/contact">Need Help?</NavLink>
				}
			</div>
        </div>

        
    </div>
</div>

@code{
    bool playsound = false;
    bool New_Feedback = false;
    User? user;
    protected override Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += async (_, _) =>
                {

                    if (NavigationManager.Uri == "/usersfeedback" && playsound == true)
                    {
                        playsound = false;
                        NavigationManager.NavigateTo(NavigationManager.Uri);
                    }
                    //NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);        
                    // if logged in
                    if (Auth.IsAuthorised())
                    {
                        await Task.Delay(50); // ensure delay to allow for user to be correctly loaded
                        user = Auth.GetUser();
                        // check if user has new feedback

                        if (user != null){
                            List<Core.Definitions.Notification?>? notifications = await UserClient.GetNotification(user.UserID);

                            if (notifications.Count > 0){

                                New_Feedback = true;

                                await InvokeAsync(StateHasChanged);
                            }else{
                                New_Feedback = false;

                                await InvokeAsync(StateHasChanged);
                            }

                        }else{
                            NavigationManager.NavigateTo(NavigationManager.Uri);

                        }


                    }
                    await InvokeAsync(StateHasChanged);
                };
        return Task.CompletedTask;
    }
    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        //Console.WriteLine("playsound: " + playsound);
            if(playsound){
            await Js.InvokeVoidAsync("PlaySoundEffect", "sounds/notification.wav");
            }

    }

}



