@using Core.Definitions
@inject JAuth Auth
@inject NavigationManager NavigationManager
@inject API.UserAPI UserClient
@rendermode InteractiveServer
@inject IJSRuntime Js

<div Style="display: flex; flex-direction: column; height: 100%; padding: 0; background-color: #2c3e50;">
    <!-- Title header -->
    <div Style="display: flex; align-items: center; justify-content: center; padding: 12px 15px; border-bottom: 1px solid #34495e; font-family: 'Poppins', sans-serif;">
        <span class="nav-text-full" Style="color: #ffffff; font-weight: 600; font-size: 16px; text-align: center;">Feedback Tracker</span>
        <span class="nav-text-short" Style="color: #ffffff; font-weight: 600; font-size: 16px; display: none; text-align: center;">TSE</span>
    </div>

    <div Style="flex: 1; display: flex; flex-direction: column; overflow-y: auto; padding-top: 15px;">
        <div Style="padding: 5px 15px; margin-bottom: 10px;">
            <NavLink href="" Match="NavLinkMatch.All" Style="display: flex; align-items: center; padding: 8px 10px; border-radius: 5px; text-decoration: none; color: #ffffff; transition: background-color 0.2s;" class="nav-item">
                <RadzenIcon Icon="home" Style="font-size: 20px; color: #ffffff; margin-right: 2px;" class="nav-icon" />
                <span class="nav-text">  Home</span>
            </NavLink>
        </div>
        
        @if (Auth.IsAuthorised())
        {
            <div Style="padding: 5px 15px; margin: 2px 0;">
                <NavLink href="feedback" Style="display: flex; align-items: center; padding: 8px 10px; border-radius: 5px; text-decoration: none; color: #ffffff; transition: background-color 0.2s;" class="nav-item">
                    <RadzenIcon Icon="note_add" Style="font-size: 20px; color: #ffffff; margin-right: 2px;" class="nav-icon" />
                    <span class="nav-text">  Create Feedback</span>
                </NavLink>
            </div>
            
            <div Style="padding: 5px 15px; margin: 2px 0;">
                <NavLink href="usersfeedback" Style="display: flex; align-items: center; padding: 8px 10px; border-radius: 5px; text-decoration: none; color: #ffffff; transition: background-color 0.2s;" class="nav-item">
                    <RadzenIcon Icon="assignment" Style="font-size: 18px; color: #dddddd;" class="nav-icon" />
                    <span class="nav-text"> Your Feedback</span>
                    @if (New_Feedback)
                    {
                        <span Style="color: #ff6b6b; font-weight: bold; margin-left: 5px; animation: pulse 1s infinite;">🔔</span>
                        playsound = true;
                    }
                    else
                    {
                        playsound = false;
                    }
                </NavLink>
            </div>

            @if (user != null && user.IsTeacher)
            {
                <div Style="padding: 5px 15px; margin: 2px 0;">
                    <NavLink href="TeacherDashboard" Style="display: flex; align-items: center; padding: 8px 10px; border-radius: 5px; text-decoration: none; color: #ffffff; transition: background-color 0.2s;" class="nav-item">
                        <RadzenIcon Icon="assessment" Style="font-size: 18px; color: #dddddd;" class="nav-icon" />
                        <span class="nav-text">Teacher Dashboard</span>
                    </NavLink>
                </div>
            }
        }
    </div>
    
    <!-- Bottom Navigation Icons -->
    <div Style="padding: 15px; margin-top: auto; border-top: 1px solid #34495e;">
        <div class="settings-buttons" Style="display: flex; align-items: center; justify-content: flex-start;">
            <RadzenButton Click="@(() => NavigationManager.NavigateTo("/settings"))" 
                Style="padding: 0; width: 34px; height: 34px; margin-right: 10px; border-radius: 50%; display: flex; align-items: center; justify-content: center; background-color: transparent; color: #dddddd; box-shadow: none;">
                <RadzenIcon Icon="settings" />
            </RadzenButton>
            <RadzenButton Click="@(() => NavigationManager.NavigateTo("/contact"))"          
                Style="padding: 0; width: 34px; height: 34px; border-radius: 50%; display: flex; align-items: center; justify-content: center; background-color: transparent; color: #dddddd; box-shadow: none;">
                <RadzenIcon Icon="help_outline" />
            </RadzenButton>
            <RadzenButton Click="@(() => NavigationManager.NavigateTo("/logout"))"          
                Style="padding: 0; width: 34px; height: 34px; margin-left: 10px; border-radius: 50%; display: flex; align-items: center; justify-content: center; background-color: transparent; color: #dddddd; box-shadow: none;">
                <RadzenIcon Icon="logout" />
                </RadzenButton>
        </div>
    </div>
</div>



@code{
    bool playsound = false;
    bool New_Feedback = false;
    User? user;
    protected override Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += async (_, _) =>
                {

                    if (NavigationManager.Uri == "/usersfeedback" && playsound == true)
                    {
                        playsound = false;
                        NavigationManager.NavigateTo(NavigationManager.Uri);
                    }
                    //NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);        
                    // if logged in
                    if (Auth.IsAuthorised())
                    {
                        await Task.Delay(50); // ensure delay to allow for user to be correctly loaded
                        user = Auth.GetUser();
                        // check if user has new feedback

                        if (user != null){
                            List<Core.Definitions.Notification?>? notifications = await UserClient.GetNotification(user.UserID);

                            if (notifications.Count > 0){

                                New_Feedback = true;

                                await InvokeAsync(StateHasChanged);
                            }else{
                                New_Feedback = false;

                                await InvokeAsync(StateHasChanged);
                            }

                        }else{
                            NavigationManager.NavigateTo(NavigationManager.Uri);

                        }


                    }
                    await InvokeAsync(StateHasChanged);
                };
        return Task.CompletedTask;
    }
    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        //Console.WriteLine("playsound: " + playsound);
            if(playsound){
            await Js.InvokeVoidAsync("PlaySoundEffect", "sounds/notification.wav");
            }

    }

}