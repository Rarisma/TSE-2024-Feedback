@using System.Text.Json
@using Core.Definitions
@inject JAuth Auth
@inject NavigationManager NavigationManager
@inject API.UserAPI UserClient
@inject API.NotificationAPI NotificationClient
@rendermode InteractiveServer
@inject IJSRuntime Js
@inject NotificationService NotificationService
@using FeedbackTracker.Services
@inject AppTheme AppTheme

<div class="@AppTheme.ColourTheme" Style="display: flex; flex-direction: column; height: 100%; padding: 0;">

    <!-- Title header -->
    <div Style="display: flex; align-items: center; justify-content: center; padding: 12px 15px; border-bottom: 1px solid var(--sidebar-border); font-family: 'Poppins', sans-serif;">
        <span class="nav-text-full" Style="color: var(--light-text); font-weight: 600; font-size: 16px; text-align: center;">Feedback Tracker</span>
        <span class="nav-text-short" Style="color: var(--light-text); font-weight: 600; font-size: 16px; display: none; text-align: center;">TSE</span>
    </div>

    <div Style="flex: 1; display: flex; flex-direction: column; overflow-y: auto; padding-top: 15px;">
        <div Style="padding: 5px 15px; margin-bottom: 10px;">
            <NavLink href="" Match="NavLinkMatch.All" Style="display: flex; align-items: center; padding: 8px 10px; border-radius: 5px; text-decoration: none; color: var(--light-text); transition: background-color 0.2s;" class="nav-item">
                <RadzenIcon Icon="home" Style="font-size: 20px; color: var(--light-text); margin-right: 2px;" class="nav-icon" />
                <span class="nav-text">  Home</span>
            </NavLink>
        </div>
        
        @if (Auth.IsAuthorised())
        {
            <div Style="padding: 5px 15px; margin: 2px 0;">
                <NavLink href="feedback" Style="display: flex; align-items: center; padding: 8px 10px; border-radius: 5px; text-decoration: none; color: var(--light-text); transition: background-color 0.2s;" class="nav-item">
                    <RadzenIcon Icon="note_add" Style="font-size: 20px; color: var(--light-text); margin-right: 2px;" class="nav-icon" />
                    <span class="nav-text">  Create Feedback</span>
                </NavLink>
            </div>
            
            <div Style="padding: 5px 15px; margin: 2px 0;">
                <NavLink href="usersfeedback" Style="display: flex; align-items: center; padding: 8px 10px; border-radius: 5px; text-decoration: none; color: var(--light-text); transition: background-color 0.2s;" class="nav-item">
                    <RadzenIcon Icon="assignment" Style="font-size: 18px; color: var(--icon-color); margin-right: 2px;" class="nav-icon" />
                    <span class="nav-text"> Your Feedback</span>
                </NavLink>
            </div>

            @if (user != null && user.IsTeacher)
            {
                <div Style="padding: 5px 15px; margin: 2px 0;">
                    <NavLink href="TeacherDashboard" Style="display: flex; align-items: center; padding: 8px 10px; border-radius: 5px; text-decoration: none; color: var(--light-text); transition: background-color 0.2s;" class="nav-item">
                        <RadzenIcon Icon="assessment" Style="font-size: 18px; color: var(--icon-color); margin-right: 2px;" class="nav-icon" />
                        <span class="nav-text">Teacher Dashboard</span>
                    </NavLink>
                </div>
            }
        }
    </div>
    
    <!-- Bottom Navigation Icons -->
    <div Style="padding: 15px; margin-top: auto; border-top: 1px solid var(--sidebar-border);">
        <div class="settings-buttons" Style="display: flex; align-items: center; justify-content: center; width: 100%;">
            <a href="/settings" class="nav-button"
            Style="padding: 0; width: 34px; height: 34px; margin-right: 12px; border-radius: 50%; display: flex; align-items: center; justify-content: center; background-color: transparent; color: var(--icon-color); border: none; text-decoration: none; cursor: pointer;">
                <span class="material-icons">settings</span>
            </a>
            <a href="/contact" class="nav-button"
            Style="padding: 0; width: 34px; height: 34px; margin-right: 12px; border-radius: 50%; display: flex; align-items: center; justify-content: center; background-color: transparent; color: var(--icon-color); border: none; text-decoration: none; cursor: pointer;">
                <span class="material-icons">help_outline</span>
            </a>
            <button @onclick="CycleTheme" id="theme-toggle-button" class="nav-button"
            Style="padding: 0; width: 34px; height: 34px; margin-right: 12px; border-radius: 50%; display: flex; align-items: center; justify-content: center; background-color: transparent; border: none; cursor: pointer;">
                <span class="material-icons theme-icon" style="color: var(--icon-color) !important;">@GetThemeIcon(AppTheme.ColourTheme)</span>
            </button>
            @if (Auth.IsAuthorised()){ <a href="/logout" class="nav-button"
            Style="padding: 0; width: 34px; height: 34px; border-radius: 50%; display: flex; align-items: center; justify-content: center; background-color: transparent; color: var(--icon-color); border: none; text-decoration: none; cursor: pointer;">
                <span class="material-icons">logout</span></a>}
        </div>
    </div>
</div>



@code{
    User? user;
    protected override Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += async (_, _) =>
                {

                    //NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);        
                    // if logged in
                    if (Auth.IsAuthorised())
                    {
                        await Task.Delay(50); // ensure delay to allow for user to be correctly loaded
                        user = Auth.GetUser();


                        // show any notifications
                        Notify();


                    }
                    await InvokeAsync(StateHasChanged);
                };
        return Task.CompletedTask;
    }
    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        /*Console.WriteLine("playsound: " + playsound);

            if(playsound){
            await Js.InvokeVoidAsync("PlaySoundEffect", "sounds/notification.wav");
            }
		*/ 
        //initialize the theme
        if (firstrender)
        {
            await AppTheme.InitializeAsync();
        }

    }

    async void Notify()
    {
	    if (user != null){
            // get notifications
            List<Core.Definitions.Notification?>? notifications = await NotificationClient.GetNotificationByUser(user.UserID);

		    if (notifications.Count > 0){
                    
			    // play sound
			    await Js.InvokeVoidAsync("PlaySoundEffect", "sounds/notification.wav");

			    foreach (var notification in notifications)
			    {
                    // show notifications
				    NotificationService.Notify(new NotificationMessage()
					    {
                            // setup

                            // notification type
						    Severity = NotificationSeverity.Info,
                            // linger time
						    Duration = 10000,
                            // show time left
						    ShowProgress = true,
                            // title
						    SummaryContent = ns =>@<RadzenText TextStyle="TextStyle.H6">@notification.Title :@notification.TimeSinceCreation</RadzenText>,
                            // main content
							DetailContent = ns => @<RadzenText TextStyle="TextStyle.H6">@notification.Message</RadzenText>,
                            // show x to close
						    CloseOnClick = true, 
                            // function to do on click
	                        Click = notifications =>
	                        {
                                // if notification relates to feedback
		                        if (notification.Type == "FEEDBACK")
		                        {
	                            // re-direct to feedback
		                        NavigationManager.NavigateTo($"/viewfeedback/{notification.Payload}");

		                        }
	                            // clear notifications
		                        NotificationService.Messages.Clear();
	                        },
					    });
			    }

                // delete notifications
                await NotificationClient.NotificationDelete(user.UserID);

			    await InvokeAsync(StateHasChanged);
		    }

	    }else{
		    NavigationManager.NavigateTo(NavigationManager.Uri);

	    }

    }

    protected override void OnInitialized()
    {
        //update the icon
        AppTheme.OnChange += StateHasChanged;
        base.OnInitialized();
    }

    private string GetThemeIcon(string theme)
    {
        return theme switch
        {
            "theme-light" => "light_mode",
            "theme-dark" => "dark_mode",
            "theme-hybrid" => "contrast",
        };
    }

    private void CycleTheme()
    {
        AppTheme.CycleTheme();
    }

    //avoid memory leaks
    public void Dispose()
    {
        AppTheme.OnChange -= StateHasChanged;
    }
}
